
Lab3-Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800895c  0800895c  0000995c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008978  08008978  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008978  08008978  00009978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008980  08008980  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008980  08008980  00009980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008984  08008984  00009984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008988  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016de6  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036eb  00000000  00000000  00020e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  00024580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fff  00000000  00000000  00025a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002389f  00000000  00000000  00026a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cb5  00000000  00000000  0004a2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2313  00000000  00000000  00062f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135296  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b8c  00000000  00000000  001352dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0013ae68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008944 	.word	0x08008944

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008944 	.word	0x08008944

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc56 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f820 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f970 	bl	80007e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f886 	bl	8000614 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000508:	f000 f8b2 	bl	8000670 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800050c:	f007 fdd6 	bl	80080bc <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000510:	f000 f8e4 	bl	80006dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	4809      	ldr	r0, [pc, #36]	@ (800053c <main+0x48>)
 8000518:	f003 ff54 	bl	80043c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800051c:	2104      	movs	r1, #4
 800051e:	4807      	ldr	r0, [pc, #28]	@ (800053c <main+0x48>)
 8000520:	f003 ff50 	bl	80043c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000524:	2108      	movs	r1, #8
 8000526:	4805      	ldr	r0, [pc, #20]	@ (800053c <main+0x48>)
 8000528:	f003 ff4c 	bl	80043c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800052c:	210c      	movs	r1, #12
 800052e:	4803      	ldr	r0, [pc, #12]	@ (800053c <main+0x48>)
 8000530:	f003 ff48 	bl	80043c4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000534:	f007 fde8 	bl	8008108 <MX_USB_HOST_Process>
 8000538:	e7fc      	b.n	8000534 <main+0x40>
 800053a:	bf00      	nop
 800053c:	20000144 	.word	0x20000144

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f008 f96a 	bl	8008828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	@ (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	@ (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	@ (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	@ (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f9a0 	bl	800390c <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 fa23 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 fc01 	bl	8003dfc <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000600:	f000 fa0c 	bl	8000a1c <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	@ 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_I2C1_Init+0x50>)
 800061a:	4a13      	ldr	r2, [pc, #76]	@ (8000668 <MX_I2C1_Init+0x54>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000620:	4a12      	ldr	r2, [pc, #72]	@ (800066c <MX_I2C1_Init+0x58>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000632:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000652:	f003 f817 	bl	8003684 <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800065c:	f000 f9de 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000098 	.word	0x20000098
 8000668:	40005400 	.word	0x40005400
 800066c:	000186a0 	.word	0x000186a0

08000670 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000676:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <MX_SPI1_Init+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800067c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006bc:	220a      	movs	r2, #10
 80006be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006c2:	f003 fda7 	bl	8004214 <HAL_SPI_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006cc:	f000 f9a6 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000ec 	.word	0x200000ec
 80006d8:	40013000 	.word	0x40013000

080006dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	@ 0x28
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006fe:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <MX_TIM4_Init+0x100>)
 8000700:	4a37      	ldr	r2, [pc, #220]	@ (80007e0 <MX_TIM4_Init+0x104>)
 8000702:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000704:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <MX_TIM4_Init+0x100>)
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <MX_TIM4_Init+0x100>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10838;
 8000710:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <MX_TIM4_Init+0x100>)
 8000712:	f642 2256 	movw	r2, #10838	@ 0x2a56
 8000716:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b30      	ldr	r3, [pc, #192]	@ (80007dc <MX_TIM4_Init+0x100>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b2f      	ldr	r3, [pc, #188]	@ (80007dc <MX_TIM4_Init+0x100>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000724:	482d      	ldr	r0, [pc, #180]	@ (80007dc <MX_TIM4_Init+0x100>)
 8000726:	f003 fdfe 	bl	8004326 <HAL_TIM_PWM_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000730:	f000 f974 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4619      	mov	r1, r3
 8000742:	4826      	ldr	r0, [pc, #152]	@ (80007dc <MX_TIM4_Init+0x100>)
 8000744:	f004 fa44 	bl	8004bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800074e:	f000 f965 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000752:	2360      	movs	r3, #96	@ 0x60
 8000754:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4118;
 8000756:	f241 0316 	movw	r3, #4118	@ 0x1016
 800075a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	4619      	mov	r1, r3
 800076a:	481c      	ldr	r0, [pc, #112]	@ (80007dc <MX_TIM4_Init+0x100>)
 800076c:	f003 fef2 	bl	8004554 <HAL_TIM_PWM_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000776:	f000 f951 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.Pulse = 4986;
 800077a:	f241 337a 	movw	r3, #4986	@ 0x137a
 800077e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2204      	movs	r2, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4815      	ldr	r0, [pc, #84]	@ (80007dc <MX_TIM4_Init+0x100>)
 8000788:	f003 fee4 	bl	8004554 <HAL_TIM_PWM_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM4_Init+0xba>
  {
    Error_Handler();
 8000792:	f000 f943 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.Pulse = 5853;
 8000796:	f241 63dd 	movw	r3, #5853	@ 0x16dd
 800079a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2208      	movs	r2, #8
 80007a0:	4619      	mov	r1, r3
 80007a2:	480e      	ldr	r0, [pc, #56]	@ (80007dc <MX_TIM4_Init+0x100>)
 80007a4:	f003 fed6 	bl	8004554 <HAL_TIM_PWM_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80007ae:	f000 f935 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.Pulse = 5419;
 80007b2:	f241 532b 	movw	r3, #5419	@ 0x152b
 80007b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	220c      	movs	r2, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4807      	ldr	r0, [pc, #28]	@ (80007dc <MX_TIM4_Init+0x100>)
 80007c0:	f003 fec8 	bl	8004554 <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 80007ca:	f000 f927 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007ce:	4803      	ldr	r0, [pc, #12]	@ (80007dc <MX_TIM4_Init+0x100>)
 80007d0:	f000 fa04 	bl	8000bdc <HAL_TIM_MspPostInit>

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000144 	.word	0x20000144
 80007e0:	40000800 	.word	0x40000800

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	@ 0x30
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
 80007fe:	4b81      	ldr	r3, [pc, #516]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a80      	ldr	r2, [pc, #512]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a04 <MX_GPIO_Init+0x220>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	4b7a      	ldr	r3, [pc, #488]	@ (8000a04 <MX_GPIO_Init+0x220>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a79      	ldr	r2, [pc, #484]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b77      	ldr	r3, [pc, #476]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b73      	ldr	r3, [pc, #460]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a72      	ldr	r2, [pc, #456]	@ (8000a04 <MX_GPIO_Init+0x220>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b70      	ldr	r3, [pc, #448]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b6c      	ldr	r3, [pc, #432]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a6b      	ldr	r2, [pc, #428]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b69      	ldr	r3, [pc, #420]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b65      	ldr	r3, [pc, #404]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a64      	ldr	r2, [pc, #400]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b62      	ldr	r3, [pc, #392]	@ (8000a04 <MX_GPIO_Init+0x220>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b5e      	ldr	r3, [pc, #376]	@ (8000a04 <MX_GPIO_Init+0x220>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a5d      	ldr	r2, [pc, #372]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b5b      	ldr	r3, [pc, #364]	@ (8000a04 <MX_GPIO_Init+0x220>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2108      	movs	r1, #8
 80008a6:	4858      	ldr	r0, [pc, #352]	@ (8000a08 <MX_GPIO_Init+0x224>)
 80008a8:	f000 fdc2 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2101      	movs	r1, #1
 80008b0:	4856      	ldr	r0, [pc, #344]	@ (8000a0c <MX_GPIO_Init+0x228>)
 80008b2:	f000 fdbd 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2110      	movs	r1, #16
 80008ba:	4855      	ldr	r0, [pc, #340]	@ (8000a10 <MX_GPIO_Init+0x22c>)
 80008bc:	f000 fdb8 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c0:	2308      	movs	r3, #8
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	484c      	ldr	r0, [pc, #304]	@ (8000a08 <MX_GPIO_Init+0x224>)
 80008d8:	f000 fc0e 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008dc:	2301      	movs	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4846      	ldr	r0, [pc, #280]	@ (8000a0c <MX_GPIO_Init+0x228>)
 80008f4:	f000 fc00 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008f8:	2308      	movs	r3, #8
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000908:	2305      	movs	r3, #5
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	483e      	ldr	r0, [pc, #248]	@ (8000a0c <MX_GPIO_Init+0x228>)
 8000914:	f000 fbf0 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000918:	2301      	movs	r3, #1
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4839      	ldr	r0, [pc, #228]	@ (8000a14 <MX_GPIO_Init+0x230>)
 800092e:	f000 fbe3 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000932:	2310      	movs	r3, #16
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000942:	2306      	movs	r3, #6
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4831      	ldr	r0, [pc, #196]	@ (8000a14 <MX_GPIO_Init+0x230>)
 800094e:	f000 fbd3 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000952:	2304      	movs	r3, #4
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	482c      	ldr	r0, [pc, #176]	@ (8000a18 <MX_GPIO_Init+0x234>)
 8000966:	f000 fbc7 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800096a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097c:	2305      	movs	r3, #5
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4824      	ldr	r0, [pc, #144]	@ (8000a18 <MX_GPIO_Init+0x234>)
 8000988:	f000 fbb6 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800098c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800099e:	2306      	movs	r3, #6
 80009a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4818      	ldr	r0, [pc, #96]	@ (8000a0c <MX_GPIO_Init+0x228>)
 80009aa:	f000 fba5 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80009ae:	2310      	movs	r3, #16
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4812      	ldr	r0, [pc, #72]	@ (8000a10 <MX_GPIO_Init+0x22c>)
 80009c6:	f000 fb97 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ca:	2320      	movs	r3, #32
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <MX_GPIO_Init+0x22c>)
 80009de:	f000 fb8b 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <MX_GPIO_Init+0x224>)
 80009f8:	f000 fb7e 	bl	80010f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009fc:	bf00      	nop
 80009fe:	3730      	adds	r7, #48	@ 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a66:	2007      	movs	r0, #7
 8000a68:	f000 fb04 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	@ (8000afc <HAL_I2C_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12c      	bne.n	8000af4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ab6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abc:	2312      	movs	r3, #18
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <HAL_I2C_MspInit+0x8c>)
 8000ad4:	f000 fb10 	bl	80010f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ae2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	@ 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40005400 	.word	0x40005400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400

08000b08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <HAL_SPI_MspInit+0x84>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12b      	bne.n	8000b82 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	4a17      	ldr	r2, [pc, #92]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a10      	ldr	r2, [pc, #64]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <HAL_SPI_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b62:	23e0      	movs	r3, #224	@ 0xe0
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b72:	2305      	movs	r3, #5
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <HAL_SPI_MspInit+0x8c>)
 8000b7e:	f000 fabb 	bl	80010f8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	@ 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d10d      	bne.n	8000bc6 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <HAL_TIM_PWM_MspInit+0x40>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	4a09      	ldr	r2, [pc, #36]	@ (8000bd8 <HAL_TIM_PWM_MspInit+0x40>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <HAL_TIM_PWM_MspInit+0x40>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40000800 	.word	0x40000800
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <HAL_TIM_MspPostInit+0x68>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d11e      	bne.n	8000c3c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_TIM_MspPostInit+0x6c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_TIM_MspPostInit+0x6c>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_TIM_MspPostInit+0x6c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c1a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	4619      	mov	r1, r3
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <HAL_TIM_MspPostInit+0x70>)
 8000c38:	f000 fa5e 	bl	80010f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40000800 	.word	0x40000800
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020c00 	.word	0x40020c00

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <NMI_Handler+0x4>

08000c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <MemManage_Handler+0x4>

08000c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca6:	f000 f8d1 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <OTG_FS_IRQHandler+0x10>)
 8000cb6:	f000 fe91 	bl	80019dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000570 	.word	0x20000570

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f007 fdb0 	bl	8008858 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20020000 	.word	0x20020000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	2000018c 	.word	0x2000018c
 8000d2c:	20000a98 	.word	0x20000a98

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d58:	f7ff ffea 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	@ (8000d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	@ (8000da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d82:	f007 fd6f 	bl	8008864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fbb5 	bl	80004f4 <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d98:	08008988 	.word	0x08008988
  ldr r2, =_sbss
 8000d9c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000da0:	20000a98 	.word	0x20000a98

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f94f 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fe24 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f967 	bl	80010de <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e28:	f000 f92f 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	@ (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000190 	.word	0x20000190

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000190 	.word	0x20000190

08000e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff ffee 	bl	8000e74 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ea4:	d005      	beq.n	8000eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_Delay+0x44>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb2:	bf00      	nop
 8000eb4:	f7ff ffde 	bl	8000e74 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f7      	bhi.n	8000eb4 <HAL_Delay+0x28>
  {
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	@ (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	@ (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff3e 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff31 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e16b      	b.n	80013ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 815a 	bne.w	80013e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80b4 	beq.w	80013e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b60      	ldr	r3, [pc, #384]	@ (8001404 <HAL_GPIO_Init+0x30c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	4a5f      	ldr	r2, [pc, #380]	@ (8001404 <HAL_GPIO_Init+0x30c>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128c:	6453      	str	r3, [r2, #68]	@ 0x44
 800128e:	4b5d      	ldr	r3, [pc, #372]	@ (8001404 <HAL_GPIO_Init+0x30c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a5b      	ldr	r2, [pc, #364]	@ (8001408 <HAL_GPIO_Init+0x310>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a52      	ldr	r2, [pc, #328]	@ (800140c <HAL_GPIO_Init+0x314>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d02b      	beq.n	800131e <HAL_GPIO_Init+0x226>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a51      	ldr	r2, [pc, #324]	@ (8001410 <HAL_GPIO_Init+0x318>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d025      	beq.n	800131a <HAL_GPIO_Init+0x222>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a50      	ldr	r2, [pc, #320]	@ (8001414 <HAL_GPIO_Init+0x31c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d01f      	beq.n	8001316 <HAL_GPIO_Init+0x21e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001418 <HAL_GPIO_Init+0x320>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d019      	beq.n	8001312 <HAL_GPIO_Init+0x21a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4e      	ldr	r2, [pc, #312]	@ (800141c <HAL_GPIO_Init+0x324>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0x216>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001420 <HAL_GPIO_Init+0x328>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00d      	beq.n	800130a <HAL_GPIO_Init+0x212>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001424 <HAL_GPIO_Init+0x32c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x20e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001428 <HAL_GPIO_Init+0x330>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_GPIO_Init+0x20a>
 80012fe:	2307      	movs	r3, #7
 8001300:	e00e      	b.n	8001320 <HAL_GPIO_Init+0x228>
 8001302:	2308      	movs	r3, #8
 8001304:	e00c      	b.n	8001320 <HAL_GPIO_Init+0x228>
 8001306:	2306      	movs	r3, #6
 8001308:	e00a      	b.n	8001320 <HAL_GPIO_Init+0x228>
 800130a:	2305      	movs	r3, #5
 800130c:	e008      	b.n	8001320 <HAL_GPIO_Init+0x228>
 800130e:	2304      	movs	r3, #4
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x228>
 8001312:	2303      	movs	r3, #3
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x228>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x228>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x228>
 800131e:	2300      	movs	r3, #0
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	f002 0203 	and.w	r2, r2, #3
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001330:	4935      	ldr	r1, [pc, #212]	@ (8001408 <HAL_GPIO_Init+0x310>)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b3b      	ldr	r3, [pc, #236]	@ (800142c <HAL_GPIO_Init+0x334>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001362:	4a32      	ldr	r2, [pc, #200]	@ (800142c <HAL_GPIO_Init+0x334>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001368:	4b30      	ldr	r3, [pc, #192]	@ (800142c <HAL_GPIO_Init+0x334>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800138c:	4a27      	ldr	r2, [pc, #156]	@ (800142c <HAL_GPIO_Init+0x334>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001392:	4b26      	ldr	r3, [pc, #152]	@ (800142c <HAL_GPIO_Init+0x334>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b6:	4a1d      	ldr	r2, [pc, #116]	@ (800142c <HAL_GPIO_Init+0x334>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_GPIO_Init+0x334>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e0:	4a12      	ldr	r2, [pc, #72]	@ (800142c <HAL_GPIO_Init+0x334>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3301      	adds	r3, #1
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	f67f ae90 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3724      	adds	r7, #36	@ 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40013800 	.word	0x40013800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40020800 	.word	0x40020800
 8001418:	40020c00 	.word	0x40020c00
 800141c:	40021000 	.word	0x40021000
 8001420:	40021400 	.word	0x40021400
 8001424:	40021800 	.word	0x40021800
 8001428:	40021c00 	.word	0x40021c00
 800142c:	40013c00 	.word	0x40013c00

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800144c:	e003      	b.n	8001456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	619a      	str	r2, [r3, #24]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af02      	add	r7, sp, #8
 8001468:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e059      	b.n	8001528 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f006 fe72 	bl	8008178 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2203      	movs	r2, #3
 8001498:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014a2:	d102      	bne.n	80014aa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 fc7f 	bl	8004db2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7c1a      	ldrb	r2, [r3, #16]
 80014bc:	f88d 2000 	strb.w	r2, [sp]
 80014c0:	3304      	adds	r3, #4
 80014c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c4:	f003 fc00 	bl	8004cc8 <USB_CoreInit>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2202      	movs	r2, #2
 80014d2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e026      	b.n	8001528 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2101      	movs	r1, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 fc77 	bl	8004dd4 <USB_SetCurrentMode>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2202      	movs	r2, #2
 80014f0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e017      	b.n	8001528 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7c1a      	ldrb	r2, [r3, #16]
 8001500:	f88d 2000 	strb.w	r2, [sp]
 8001504:	3304      	adds	r3, #4
 8001506:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001508:	f003 fe20 	bl	800514c <USB_HostInit>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2202      	movs	r2, #2
 8001516:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e004      	b.n	8001528 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b08b      	sub	sp, #44	@ 0x2c
 8001534:	af04      	add	r7, sp, #16
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	4608      	mov	r0, r1
 800153a:	4611      	mov	r1, r2
 800153c:	461a      	mov	r2, r3
 800153e:	4603      	mov	r3, r0
 8001540:	70fb      	strb	r3, [r7, #3]
 8001542:	460b      	mov	r3, r1
 8001544:	70bb      	strb	r3, [r7, #2]
 8001546:	4613      	mov	r3, r2
 8001548:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800154a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800154c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_HCD_HC_Init+0x2c>
 8001558:	2302      	movs	r3, #2
 800155a:	e09d      	b.n	8001698 <HAL_HCD_HC_Init+0x168>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001564:	78fa      	ldrb	r2, [r7, #3]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3319      	adds	r3, #25
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001578:	78fa      	ldrb	r2, [r7, #3]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	1a9b      	subs	r3, r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	3314      	adds	r3, #20
 8001588:	787a      	ldrb	r2, [r7, #1]
 800158a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3315      	adds	r3, #21
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015a0:	78fa      	ldrb	r2, [r7, #3]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3326      	adds	r3, #38	@ 0x26
 80015b0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80015b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	78bb      	ldrb	r3, [r7, #2]
 80015ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015be:	b2d8      	uxtb	r0, r3
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	3316      	adds	r3, #22
 80015ce:	4602      	mov	r2, r0
 80015d0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fba4 	bl	8001d24 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80015dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da0a      	bge.n	80015fa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3317      	adds	r3, #23
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e009      	b.n	800160e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	3317      	adds	r3, #23
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f003 fefe 	bl	8005414 <USB_GetHostSpeed>
 8001618:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800161a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800161e:	2b01      	cmp	r3, #1
 8001620:	d10b      	bne.n	800163a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001622:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_HCD_HC_Init+0x10a>
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d104      	bne.n	800163a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2bbc      	cmp	r3, #188	@ 0xbc
 8001634:	d901      	bls.n	800163a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001636:	23bc      	movs	r3, #188	@ 0xbc
 8001638:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800163a:	78fa      	ldrb	r2, [r7, #3]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	3318      	adds	r3, #24
 800164a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800164e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	b298      	uxth	r0, r3
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3328      	adds	r3, #40	@ 0x28
 8001664:	4602      	mov	r2, r0
 8001666:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	b29b      	uxth	r3, r3
 8001670:	787c      	ldrb	r4, [r7, #1]
 8001672:	78ba      	ldrb	r2, [r7, #2]
 8001674:	78f9      	ldrb	r1, [r7, #3]
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4623      	mov	r3, r4
 8001686:	f003 feed 	bl	8005464 <USB_HC_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}

080016a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	70fb      	strb	r3, [r7, #3]
 80016b2:	460b      	mov	r3, r1
 80016b4:	70bb      	strb	r3, [r7, #2]
 80016b6:	4613      	mov	r3, r2
 80016b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016ba:	78fa      	ldrb	r2, [r7, #3]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	3317      	adds	r3, #23
 80016ca:	78ba      	ldrb	r2, [r7, #2]
 80016cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	3326      	adds	r3, #38	@ 0x26
 80016de:	787a      	ldrb	r2, [r7, #1]
 80016e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016e2:	7c3b      	ldrb	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d114      	bne.n	8001712 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	1a9b      	subs	r3, r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	332a      	adds	r3, #42	@ 0x2a
 80016f8:	2203      	movs	r2, #3
 80016fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	3319      	adds	r3, #25
 800170c:	7f3a      	ldrb	r2, [r7, #28]
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	e009      	b.n	8001726 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	332a      	adds	r3, #42	@ 0x2a
 8001722:	2202      	movs	r2, #2
 8001724:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001726:	787b      	ldrb	r3, [r7, #1]
 8001728:	2b03      	cmp	r3, #3
 800172a:	f200 8102 	bhi.w	8001932 <HAL_HCD_HC_SubmitRequest+0x292>
 800172e:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001734:	08001745 	.word	0x08001745
 8001738:	0800191d 	.word	0x0800191d
 800173c:	08001809 	.word	0x08001809
 8001740:	08001893 	.word	0x08001893
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001744:	7c3b      	ldrb	r3, [r7, #16]
 8001746:	2b01      	cmp	r3, #1
 8001748:	f040 80f5 	bne.w	8001936 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800174c:	78bb      	ldrb	r3, [r7, #2]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d12d      	bne.n	80017ae <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001752:	8b3b      	ldrh	r3, [r7, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	333d      	adds	r3, #61	@ 0x3d
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	1a9b      	subs	r3, r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	333d      	adds	r3, #61	@ 0x3d
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10a      	bne.n	8001798 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	332a      	adds	r3, #42	@ 0x2a
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001796:	e0ce      	b.n	8001936 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	332a      	adds	r3, #42	@ 0x2a
 80017a8:	2202      	movs	r2, #2
 80017aa:	701a      	strb	r2, [r3, #0]
      break;
 80017ac:	e0c3      	b.n	8001936 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	331a      	adds	r3, #26
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	f040 80b8 	bne.w	8001936 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	333c      	adds	r3, #60	@ 0x3c
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10a      	bne.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	332a      	adds	r3, #42	@ 0x2a
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
      break;
 80017f0:	e0a1      	b.n	8001936 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	332a      	adds	r3, #42	@ 0x2a
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
      break;
 8001806:	e096      	b.n	8001936 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001808:	78bb      	ldrb	r3, [r7, #2]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d120      	bne.n	8001850 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	333d      	adds	r3, #61	@ 0x3d
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10a      	bne.n	800183a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	1a9b      	subs	r3, r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	332a      	adds	r3, #42	@ 0x2a
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001838:	e07e      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	332a      	adds	r3, #42	@ 0x2a
 800184a:	2202      	movs	r2, #2
 800184c:	701a      	strb	r2, [r3, #0]
      break;
 800184e:	e073      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	333c      	adds	r3, #60	@ 0x3c
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10a      	bne.n	800187c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	332a      	adds	r3, #42	@ 0x2a
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
      break;
 800187a:	e05d      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	332a      	adds	r3, #42	@ 0x2a
 800188c:	2202      	movs	r2, #2
 800188e:	701a      	strb	r2, [r3, #0]
      break;
 8001890:	e052      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001892:	78bb      	ldrb	r3, [r7, #2]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d120      	bne.n	80018da <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	333d      	adds	r3, #61	@ 0x3d
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10a      	bne.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	332a      	adds	r3, #42	@ 0x2a
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018c2:	e039      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	332a      	adds	r3, #42	@ 0x2a
 80018d4:	2202      	movs	r2, #2
 80018d6:	701a      	strb	r2, [r3, #0]
      break;
 80018d8:	e02e      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	333c      	adds	r3, #60	@ 0x3c
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10a      	bne.n	8001906 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	332a      	adds	r3, #42	@ 0x2a
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
      break;
 8001904:	e018      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	332a      	adds	r3, #42	@ 0x2a
 8001916:	2202      	movs	r2, #2
 8001918:	701a      	strb	r2, [r3, #0]
      break;
 800191a:	e00d      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	332a      	adds	r3, #42	@ 0x2a
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
      break;
 8001930:	e002      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001932:	bf00      	nop
 8001934:	e000      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001936:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	332c      	adds	r3, #44	@ 0x2c
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	8b39      	ldrh	r1, [r7, #24]
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4403      	add	r3, r0
 800195c:	3334      	adds	r3, #52	@ 0x34
 800195e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	334c      	adds	r3, #76	@ 0x4c
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3338      	adds	r3, #56	@ 0x38
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	3315      	adds	r3, #21
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	334d      	adds	r3, #77	@ 0x4d
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	4613      	mov	r3, r2
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	3310      	adds	r3, #16
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	1d19      	adds	r1, r3, #4
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	799b      	ldrb	r3, [r3, #6]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f003 fe76 	bl	80056bc <USB_HC_StartXfer>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop

080019dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fb64 	bl	80050c0 <USB_GetMode>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	f040 80fb 	bne.w	8001bf6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fb27 	bl	8005058 <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80f1 	beq.w	8001bf4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fb1e 	bl	8005058 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a26:	d104      	bne.n	8001a32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fb0e 	bl	8005058 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a46:	d104      	bne.n	8001a52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fafe 	bl	8005058 <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001a66:	d104      	bne.n	8001a72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 faee 	bl	8005058 <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d103      	bne.n	8001a8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fae0 	bl	8005058 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001aa2:	d120      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001aac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d113      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001abe:	2110      	movs	r1, #16
 8001ac0:	6938      	ldr	r0, [r7, #16]
 8001ac2:	f003 f9d3 	bl	8004e6c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ac6:	6938      	ldr	r0, [r7, #16]
 8001ac8:	f003 fa02 	bl	8004ed0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7a5b      	ldrb	r3, [r3, #9]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d105      	bne.n	8001ae0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fbfa 	bl	80052d4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f006 fbc7 	bl	8008274 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fab4 	bl	8005058 <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001af6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001afa:	d102      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f001 fd4d 	bl	800359c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 faa6 	bl	8005058 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d106      	bne.n	8001b24 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f006 fb90 	bl	800823c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2208      	movs	r2, #8
 8001b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fa95 	bl	8005058 <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b38:	d139      	bne.n	8001bae <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 f836 	bl	8005bb0 <USB_HC_ReadInterrupt>
 8001b44:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e025      	b.n	8001b98 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d018      	beq.n	8001b92 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b76:	d106      	bne.n	8001b86 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f905 	bl	8001d8e <HCD_HC_IN_IRQHandler>
 8001b84:	e005      	b.n	8001b92 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 ff67 	bl	8002a60 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	795b      	ldrb	r3, [r3, #5]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d3d3      	bcc.n	8001b4c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fa50 	bl	8005058 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d101      	bne.n	8001bc6 <HAL_HCD_IRQHandler+0x1ea>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_HCD_IRQHandler+0x1ec>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d014      	beq.n	8001bf6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0210 	bic.w	r2, r2, #16
 8001bda:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 fbfe 	bl	80033de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0210 	orr.w	r2, r2, #16
 8001bf0:	619a      	str	r2, [r3, #24]
 8001bf2:	e000      	b.n	8001bf6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001bf4:	bf00      	nop
    }
  }
}
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_HCD_Start+0x16>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e013      	b.n	8001c3a <HAL_HCD_Start+0x3e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fbbe 	bl	80053a2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 f8b0 	bl	8004d90 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_HCD_Stop+0x16>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e00d      	b.n	8001c74 <HAL_HCD_Stop+0x32>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f004 f911 	bl	8005e8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fb60 	bl	800534e <USB_ResetPort>
 8001c8e:	4603      	mov	r3, r0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	334c      	adds	r3, #76	@ 0x4c
 8001cb4:	781b      	ldrb	r3, [r3, #0]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3338      	adds	r3, #56	@ 0x38
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 fba2 	bl	8005442 <USB_GetCurrentFrame>
 8001cfe:	4603      	mov	r3, r0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fb7d 	bl	8005414 <USB_GetHostSpeed>
 8001d1a:	4603      	mov	r3, r0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d30:	78fa      	ldrb	r2, [r7, #3]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	331a      	adds	r3, #26
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	331b      	adds	r3, #27
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001d58:	78fa      	ldrb	r2, [r7, #3]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	3325      	adds	r3, #37	@ 0x25
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	3324      	adds	r3, #36	@ 0x24
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 f966 	bl	800507e <USB_ReadChInterrupts>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d11a      	bne.n	8001df2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2304      	movs	r3, #4
 8001dcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	334d      	adds	r3, #77	@ 0x4d
 8001dde:	2207      	movs	r2, #7
 8001de0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	78fa      	ldrb	r2, [r7, #3]
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f003 fef1 	bl	8005bd2 <USB_HC_Halt>
 8001df0:	e09e      	b.n	8001f30 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 f93f 	bl	800507e <USB_ReadChInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e0a:	d11b      	bne.n	8001e44 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	334d      	adds	r3, #77	@ 0x4d
 8001e30:	2208      	movs	r2, #8
 8001e32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fec8 	bl	8005bd2 <USB_HC_Halt>
 8001e42:	e075      	b.n	8001f30 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 f916 	bl	800507e <USB_ReadChInterrupts>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d11a      	bne.n	8001e92 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	1a9b      	subs	r3, r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	334d      	adds	r3, #77	@ 0x4d
 8001e7e:	2206      	movs	r2, #6
 8001e80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fea1 	bl	8005bd2 <USB_HC_Halt>
 8001e90:	e04e      	b.n	8001f30 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 f8ef 	bl	800507e <USB_ReadChInterrupts>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eaa:	d11b      	bne.n	8001ee4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ebe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	334d      	adds	r3, #77	@ 0x4d
 8001ed0:	2209      	movs	r2, #9
 8001ed2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f003 fe78 	bl	8005bd2 <USB_HC_Halt>
 8001ee2:	e025      	b.n	8001f30 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 f8c6 	bl	800507e <USB_ReadChInterrupts>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef8:	2b80      	cmp	r3, #128	@ 0x80
 8001efa:	d119      	bne.n	8001f30 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	334d      	adds	r3, #77	@ 0x4d
 8001f1e:	2207      	movs	r2, #7
 8001f20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fe51 	bl	8005bd2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 f8a0 	bl	800507e <USB_ReadChInterrupts>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f48:	d112      	bne.n	8001f70 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fe3d 	bl	8005bd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f64:	461a      	mov	r2, r3
 8001f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f6a:	6093      	str	r3, [r2, #8]
 8001f6c:	f000 bd75 	b.w	8002a5a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 f880 	bl	800507e <USB_ReadChInterrupts>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	f040 8128 	bne.w	80021da <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f96:	461a      	mov	r2, r3
 8001f98:	2320      	movs	r3, #32
 8001f9a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	331b      	adds	r3, #27
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d119      	bne.n	8001fe6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	331b      	adds	r3, #27
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	0151      	lsls	r1, r2, #5
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	440a      	add	r2, r1
 8001fdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	799b      	ldrb	r3, [r3, #6]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01b      	beq.n	8002026 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3330      	adds	r3, #48	@ 0x30
 8001ffe:	6819      	ldr	r1, [r3, #0]
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	1ac9      	subs	r1, r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4403      	add	r3, r0
 8002022:	3338      	adds	r3, #56	@ 0x38
 8002024:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	334d      	adds	r3, #77	@ 0x4d
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3344      	adds	r3, #68	@ 0x44
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800205a:	461a      	mov	r2, r3
 800205c:	2301      	movs	r3, #1
 800205e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	3326      	adds	r3, #38	@ 0x26
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	3326      	adds	r3, #38	@ 0x26
 8002086:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002088:	2b02      	cmp	r3, #2
 800208a:	d110      	bne.n	80020ae <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f003 fd9c 	bl	8005bd2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a6:	461a      	mov	r2, r3
 80020a8:	2310      	movs	r3, #16
 80020aa:	6093      	str	r3, [r2, #8]
 80020ac:	e03d      	b.n	800212a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3326      	adds	r3, #38	@ 0x26
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d00a      	beq.n	80020da <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3326      	adds	r3, #38	@ 0x26
 80020d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d127      	bne.n	800212a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	0151      	lsls	r1, r2, #5
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	440a      	add	r2, r1
 80020f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020f8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	334c      	adds	r3, #76	@ 0x4c
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	334c      	adds	r3, #76	@ 0x4c
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	4619      	mov	r1, r3
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f006 f8b3 	bl	8008290 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	799b      	ldrb	r3, [r3, #6]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d13b      	bne.n	80021aa <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	3338      	adds	r3, #56	@ 0x38
 8002142:	6819      	ldr	r1, [r3, #0]
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4403      	add	r3, r0
 8002152:	3328      	adds	r3, #40	@ 0x28
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	440b      	add	r3, r1
 8002158:	1e59      	subs	r1, r3, #1
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4403      	add	r3, r0
 8002168:	3328      	adds	r3, #40	@ 0x28
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8470 	beq.w	8002a5a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	333c      	adds	r3, #60	@ 0x3c
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2d8      	uxtb	r0, r3
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	333c      	adds	r3, #60	@ 0x3c
 80021a2:	4602      	mov	r2, r0
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	f000 bc58 	b.w	8002a5a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	333c      	adds	r3, #60	@ 0x3c
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	f083 0301 	eor.w	r3, r3, #1
 80021c2:	b2d8      	uxtb	r0, r3
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	333c      	adds	r3, #60	@ 0x3c
 80021d2:	4602      	mov	r2, r0
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	f000 bc40 	b.w	8002a5a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 ff4b 	bl	800507e <USB_ReadChInterrupts>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d131      	bne.n	8002256 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021fe:	461a      	mov	r2, r3
 8002200:	2320      	movs	r3, #32
 8002202:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	331a      	adds	r3, #26
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	f040 841f 	bne.w	8002a5a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	331b      	adds	r3, #27
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	334d      	adds	r3, #77	@ 0x4d
 8002240:	2203      	movs	r2, #3
 8002242:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fcc0 	bl	8005bd2 <USB_HC_Halt>
 8002252:	f000 bc02 	b.w	8002a5a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f002 ff0d 	bl	800507e <USB_ReadChInterrupts>
 8002264:	4603      	mov	r3, r0
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	f040 8305 	bne.w	800287a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800227c:	461a      	mov	r2, r3
 800227e:	2302      	movs	r3, #2
 8002280:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	334d      	adds	r3, #77	@ 0x4d
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d114      	bne.n	80022c2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	334d      	adds	r3, #77	@ 0x4d
 80022a8:	2202      	movs	r2, #2
 80022aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	334c      	adds	r3, #76	@ 0x4c
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	e2cc      	b.n	800285c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	334d      	adds	r3, #77	@ 0x4d
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d114      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	334d      	adds	r3, #77	@ 0x4d
 80022e8:	2202      	movs	r2, #2
 80022ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	334c      	adds	r3, #76	@ 0x4c
 80022fc:	2205      	movs	r2, #5
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e2ac      	b.n	800285c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	334d      	adds	r3, #77	@ 0x4d
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b07      	cmp	r3, #7
 8002316:	d00b      	beq.n	8002330 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	334d      	adds	r3, #77	@ 0x4d
 8002328:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800232a:	2b09      	cmp	r3, #9
 800232c:	f040 80a6 	bne.w	800247c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	334d      	adds	r3, #77	@ 0x4d
 8002340:	2202      	movs	r2, #2
 8002342:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3344      	adds	r3, #68	@ 0x44
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	1c59      	adds	r1, r3, #1
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4403      	add	r3, r0
 8002364:	3344      	adds	r3, #68	@ 0x44
 8002366:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3344      	adds	r3, #68	@ 0x44
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d943      	bls.n	8002406 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	3344      	adds	r3, #68	@ 0x44
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	331a      	adds	r3, #26
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d123      	bne.n	80023f0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	331b      	adds	r3, #27
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	331c      	adds	r3, #28
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	0151      	lsls	r1, r2, #5
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	440a      	add	r2, r1
 80023e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ee:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	334c      	adds	r3, #76	@ 0x4c
 8002400:	2204      	movs	r2, #4
 8002402:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002404:	e229      	b.n	800285a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	334c      	adds	r3, #76	@ 0x4c
 8002416:	2202      	movs	r2, #2
 8002418:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	3326      	adds	r3, #38	@ 0x26
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00b      	beq.n	8002448 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	3326      	adds	r3, #38	@ 0x26
 8002440:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002442:	2b02      	cmp	r3, #2
 8002444:	f040 8209 	bne.w	800285a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800245e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002466:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002474:	461a      	mov	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800247a:	e1ee      	b.n	800285a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	334d      	adds	r3, #77	@ 0x4d
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b05      	cmp	r3, #5
 8002490:	f040 80c8 	bne.w	8002624 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	334d      	adds	r3, #77	@ 0x4d
 80024a4:	2202      	movs	r2, #2
 80024a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	331b      	adds	r3, #27
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	f040 81ce 	bne.w	800285c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3326      	adds	r3, #38	@ 0x26
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d16b      	bne.n	80025ae <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3348      	adds	r3, #72	@ 0x48
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	1c59      	adds	r1, r3, #1
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4403      	add	r3, r0
 80024f6:	3348      	adds	r3, #72	@ 0x48
 80024f8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3348      	adds	r3, #72	@ 0x48
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d943      	bls.n	8002598 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3348      	adds	r3, #72	@ 0x48
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	331b      	adds	r3, #27
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3344      	adds	r3, #68	@ 0x44
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d809      	bhi.n	8002562 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	331c      	adds	r3, #28
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	0151      	lsls	r1, r2, #5
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	440a      	add	r2, r1
 8002578:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800257c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002580:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	334c      	adds	r3, #76	@ 0x4c
 8002592:	2204      	movs	r2, #4
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	e014      	b.n	80025c2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	334c      	adds	r3, #76	@ 0x4c
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e009      	b.n	80025c2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	334c      	adds	r3, #76	@ 0x4c
 80025be:	2202      	movs	r2, #2
 80025c0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	3326      	adds	r3, #38	@ 0x26
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3326      	adds	r3, #38	@ 0x26
 80025e8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	f040 8136 	bne.w	800285c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002606:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800260e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800261c:	461a      	mov	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e11b      	b.n	800285c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	334d      	adds	r3, #77	@ 0x4d
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b03      	cmp	r3, #3
 8002638:	f040 8081 	bne.w	800273e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334d      	adds	r3, #77	@ 0x4d
 800264c:	2202      	movs	r2, #2
 800264e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	331b      	adds	r3, #27
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	f040 80fa 	bne.w	800285c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	334c      	adds	r3, #76	@ 0x4c
 8002678:	2202      	movs	r2, #2
 800267a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	0151      	lsls	r1, r2, #5
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	440a      	add	r2, r1
 8002692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	0151      	lsls	r1, r2, #5
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	440a      	add	r2, r1
 80026b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026ba:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	0151      	lsls	r1, r2, #5
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	440a      	add	r2, r1
 80026d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026d6:	f023 0320 	bic.w	r3, r3, #32
 80026da:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3326      	adds	r3, #38	@ 0x26
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	3326      	adds	r3, #38	@ 0x26
 8002702:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002704:	2b02      	cmp	r3, #2
 8002706:	f040 80a9 	bne.w	800285c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002720:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002728:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e08e      	b.n	800285c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	334d      	adds	r3, #77	@ 0x4d
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d143      	bne.n	80027dc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	334d      	adds	r3, #77	@ 0x4d
 8002764:	2202      	movs	r2, #2
 8002766:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	334c      	adds	r3, #76	@ 0x4c
 8002778:	2202      	movs	r2, #2
 800277a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3326      	adds	r3, #38	@ 0x26
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3326      	adds	r3, #38	@ 0x26
 80027a2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d159      	bne.n	800285c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027be:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027c6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d4:	461a      	mov	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e03f      	b.n	800285c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	334d      	adds	r3, #77	@ 0x4d
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d126      	bne.n	8002840 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	334d      	adds	r3, #77	@ 0x4d
 8002802:	2202      	movs	r2, #2
 8002804:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3344      	adds	r3, #68	@ 0x44
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	1c59      	adds	r1, r3, #1
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4403      	add	r3, r0
 8002826:	3344      	adds	r3, #68	@ 0x44
 8002828:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	334c      	adds	r3, #76	@ 0x4c
 800283a:	2204      	movs	r2, #4
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e00d      	b.n	800285c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	334d      	adds	r3, #77	@ 0x4d
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b02      	cmp	r3, #2
 8002854:	f000 8100 	beq.w	8002a58 <HCD_HC_IN_IRQHandler+0xcca>
 8002858:	e000      	b.n	800285c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800285a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	334c      	adds	r3, #76	@ 0x4c
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	4619      	mov	r1, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f005 fd0c 	bl	8008290 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002878:	e0ef      	b.n	8002a5a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f002 fbfb 	bl	800507e <USB_ReadChInterrupts>
 8002888:	4603      	mov	r3, r0
 800288a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288e:	2b40      	cmp	r3, #64	@ 0x40
 8002890:	d12f      	bne.n	80028f2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800289e:	461a      	mov	r2, r3
 80028a0:	2340      	movs	r3, #64	@ 0x40
 80028a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	334d      	adds	r3, #77	@ 0x4d
 80028b4:	2205      	movs	r2, #5
 80028b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	331a      	adds	r3, #26
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3344      	adds	r3, #68	@ 0x44
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 f971 	bl	8005bd2 <USB_HC_Halt>
 80028f0:	e0b3      	b.n	8002a5a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 fbbf 	bl	800507e <USB_ReadChInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b10      	cmp	r3, #16
 8002908:	f040 80a7 	bne.w	8002a5a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	3326      	adds	r3, #38	@ 0x26
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d11b      	bne.n	800295a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	3344      	adds	r3, #68	@ 0x44
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	334d      	adds	r3, #77	@ 0x4d
 8002946:	2204      	movs	r2, #4
 8002948:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f003 f93d 	bl	8005bd2 <USB_HC_Halt>
 8002958:	e03f      	b.n	80029da <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3326      	adds	r3, #38	@ 0x26
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	3326      	adds	r3, #38	@ 0x26
 8002980:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002982:	2b02      	cmp	r3, #2
 8002984:	d129      	bne.n	80029da <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	3344      	adds	r3, #68	@ 0x44
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	799b      	ldrb	r3, [r3, #6]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HCD_HC_IN_IRQHandler+0xc2a>
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	331b      	adds	r3, #27
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d110      	bne.n	80029da <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	334d      	adds	r3, #77	@ 0x4d
 80029c8:	2204      	movs	r2, #4
 80029ca:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 f8fc 	bl	8005bd2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	331b      	adds	r3, #27
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d129      	bne.n	8002a44 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	331b      	adds	r3, #27
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	0151      	lsls	r1, r2, #5
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	440a      	add	r2, r1
 8002a1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a22:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	0151      	lsls	r1, r2, #5
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	440a      	add	r2, r1
 8002a3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a3e:	f043 0320 	orr.w	r3, r3, #32
 8002a42:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a50:	461a      	mov	r2, r3
 8002a52:	2310      	movs	r3, #16
 8002a54:	6093      	str	r3, [r2, #8]
 8002a56:	e000      	b.n	8002a5a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002a58:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fafd 	bl	800507e <USB_ReadChInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d11b      	bne.n	8002ac6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	334d      	adds	r3, #77	@ 0x4d
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 f888 	bl	8005bd2 <USB_HC_Halt>
 8002ac2:	f000 bc89 	b.w	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f002 fad5 	bl	800507e <USB_ReadChInterrupts>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	f040 8082 	bne.w	8002be4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aec:	461a      	mov	r2, r3
 8002aee:	2320      	movs	r3, #32
 8002af0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	3319      	adds	r3, #25
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d124      	bne.n	8002b52 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	3319      	adds	r3, #25
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	334c      	adds	r3, #76	@ 0x4c
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	334d      	adds	r3, #77	@ 0x4d
 8002b40:	2203      	movs	r2, #3
 8002b42:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f003 f840 	bl	8005bd2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	331a      	adds	r3, #26
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	f040 8437 	bne.w	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	331b      	adds	r3, #27
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f040 842b 	bne.w	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3326      	adds	r3, #38	@ 0x26
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d009      	beq.n	8002bac <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	331b      	adds	r3, #27
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	334d      	adds	r3, #77	@ 0x4d
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 f802 	bl	8005bd2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	3344      	adds	r3, #68	@ 0x44
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	e3f9      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f002 fa46 	bl	800507e <USB_ReadChInterrupts>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bfc:	d111      	bne.n	8002c22 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c10:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 ffd9 	bl	8005bd2 <USB_HC_Halt>
 8002c20:	e3da      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f002 fa27 	bl	800507e <USB_ReadChInterrupts>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d168      	bne.n	8002d0c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	3344      	adds	r3, #68	@ 0x44
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f002 fa11 	bl	800507e <USB_ReadChInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c62:	2b40      	cmp	r3, #64	@ 0x40
 8002c64:	d112      	bne.n	8002c8c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	3319      	adds	r3, #25
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c86:	461a      	mov	r2, r3
 8002c88:	2340      	movs	r3, #64	@ 0x40
 8002c8a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	331b      	adds	r3, #27
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d019      	beq.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	331b      	adds	r3, #27
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	0151      	lsls	r1, r2, #5
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	440a      	add	r2, r1
 8002ccc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334d      	adds	r3, #77	@ 0x4d
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 ff64 	bl	8005bd2 <USB_HC_Halt>
 8002d0a:	e365      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f002 f9b2 	bl	800507e <USB_ReadChInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d20:	2b40      	cmp	r3, #64	@ 0x40
 8002d22:	d139      	bne.n	8002d98 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	334d      	adds	r3, #77	@ 0x4d
 8002d34:	2205      	movs	r2, #5
 8002d36:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	331a      	adds	r3, #26
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3319      	adds	r3, #25
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3344      	adds	r3, #68	@ 0x44
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 ff27 	bl	8005bd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d90:	461a      	mov	r2, r3
 8002d92:	2340      	movs	r3, #64	@ 0x40
 8002d94:	6093      	str	r3, [r2, #8]
 8002d96:	e31f      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 f96c 	bl	800507e <USB_ReadChInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d11a      	bne.n	8002de6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	334d      	adds	r3, #77	@ 0x4d
 8002dd2:	2206      	movs	r2, #6
 8002dd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 fef7 	bl	8005bd2 <USB_HC_Halt>
 8002de4:	e2f8      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f002 f945 	bl	800507e <USB_ReadChInterrupts>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d144      	bne.n	8002e88 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3344      	adds	r3, #68	@ 0x44
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	334d      	adds	r3, #77	@ 0x4d
 8002e22:	2204      	movs	r2, #4
 8002e24:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3319      	adds	r3, #25
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d114      	bne.n	8002e66 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	3318      	adds	r3, #24
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3319      	adds	r3, #25
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f002 feaf 	bl	8005bd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e80:	461a      	mov	r2, r3
 8002e82:	2310      	movs	r3, #16
 8002e84:	6093      	str	r3, [r2, #8]
 8002e86:	e2a7      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f002 f8f4 	bl	800507e <USB_ReadChInterrupts>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9c:	2b80      	cmp	r3, #128	@ 0x80
 8002e9e:	f040 8083 	bne.w	8002fa8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	799b      	ldrb	r3, [r3, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d111      	bne.n	8002ece <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	334d      	adds	r3, #77	@ 0x4d
 8002eba:	2207      	movs	r2, #7
 8002ebc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f002 fe83 	bl	8005bd2 <USB_HC_Halt>
 8002ecc:	e062      	b.n	8002f94 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3344      	adds	r3, #68	@ 0x44
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	1c59      	adds	r1, r3, #1
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4403      	add	r3, r0
 8002eee:	3344      	adds	r3, #68	@ 0x44
 8002ef0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3344      	adds	r3, #68	@ 0x44
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d922      	bls.n	8002f4e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	3344      	adds	r3, #68	@ 0x44
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	334c      	adds	r3, #76	@ 0x4c
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	334c      	adds	r3, #76	@ 0x4c
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	4619      	mov	r1, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f005 f9a2 	bl	8008290 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f4c:	e022      	b.n	8002f94 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	334c      	adds	r3, #76	@ 0x4c
 8002f5e:	2202      	movs	r2, #2
 8002f60:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f78:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f80:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2380      	movs	r3, #128	@ 0x80
 8002fa4:	6093      	str	r3, [r2, #8]
 8002fa6:	e217      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f002 f864 	bl	800507e <USB_ReadChInterrupts>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc0:	d11b      	bne.n	8002ffa <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	334d      	adds	r3, #77	@ 0x4d
 8002fd2:	2209      	movs	r2, #9
 8002fd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f002 fdf7 	bl	8005bd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ff6:	6093      	str	r3, [r2, #8]
 8002ff8:	e1ee      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f002 f83b 	bl	800507e <USB_ReadChInterrupts>
 8003008:	4603      	mov	r3, r0
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b02      	cmp	r3, #2
 8003010:	f040 81df 	bne.w	80033d2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	2302      	movs	r3, #2
 8003024:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	334d      	adds	r3, #77	@ 0x4d
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b01      	cmp	r3, #1
 800303a:	f040 8093 	bne.w	8003164 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	334d      	adds	r3, #77	@ 0x4d
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	334c      	adds	r3, #76	@ 0x4c
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	3326      	adds	r3, #38	@ 0x26
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d00b      	beq.n	8003094 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	3326      	adds	r3, #38	@ 0x26
 800308c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800308e:	2b03      	cmp	r3, #3
 8003090:	f040 8190 	bne.w	80033b4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	799b      	ldrb	r3, [r3, #6]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d115      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	333d      	adds	r3, #61	@ 0x3d
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	f083 0301 	eor.w	r3, r3, #1
 80030b4:	b2d8      	uxtb	r0, r3
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	333d      	adds	r3, #61	@ 0x3d
 80030c4:	4602      	mov	r2, r0
 80030c6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	799b      	ldrb	r3, [r3, #6]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	f040 8171 	bne.w	80033b4 <HCD_HC_OUT_IRQHandler+0x954>
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3334      	adds	r3, #52	@ 0x34
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8165 	beq.w	80033b4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3334      	adds	r3, #52	@ 0x34
 80030fa:	6819      	ldr	r1, [r3, #0]
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4403      	add	r3, r0
 800310a:	3328      	adds	r3, #40	@ 0x28
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	440b      	add	r3, r1
 8003110:	1e59      	subs	r1, r3, #1
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4403      	add	r3, r0
 8003120:	3328      	adds	r3, #40	@ 0x28
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	fbb1 f3f3 	udiv	r3, r1, r3
 8003128:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 813f 	beq.w	80033b4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	333d      	adds	r3, #61	@ 0x3d
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	f083 0301 	eor.w	r3, r3, #1
 800314e:	b2d8      	uxtb	r0, r3
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	333d      	adds	r3, #61	@ 0x3d
 800315e:	4602      	mov	r2, r0
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e127      	b.n	80033b4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	334d      	adds	r3, #77	@ 0x4d
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b03      	cmp	r3, #3
 8003178:	d120      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	334d      	adds	r3, #77	@ 0x4d
 800318a:	2202      	movs	r2, #2
 800318c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	331b      	adds	r3, #27
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	f040 8107 	bne.w	80033b4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	334c      	adds	r3, #76	@ 0x4c
 80031b6:	2202      	movs	r2, #2
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e0fb      	b.n	80033b4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	334d      	adds	r3, #77	@ 0x4d
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d13a      	bne.n	8003248 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	334d      	adds	r3, #77	@ 0x4d
 80031e2:	2202      	movs	r2, #2
 80031e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	334c      	adds	r3, #76	@ 0x4c
 80031f6:	2202      	movs	r2, #2
 80031f8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	331b      	adds	r3, #27
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b01      	cmp	r3, #1
 800320e:	f040 80d1 	bne.w	80033b4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	331b      	adds	r3, #27
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	0151      	lsls	r1, r2, #5
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	440a      	add	r2, r1
 800323c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003244:	6053      	str	r3, [r2, #4]
 8003246:	e0b5      	b.n	80033b4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	334d      	adds	r3, #77	@ 0x4d
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b05      	cmp	r3, #5
 800325c:	d114      	bne.n	8003288 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	334d      	adds	r3, #77	@ 0x4d
 800326e:	2202      	movs	r2, #2
 8003270:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	334c      	adds	r3, #76	@ 0x4c
 8003282:	2202      	movs	r2, #2
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e095      	b.n	80033b4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	334d      	adds	r3, #77	@ 0x4d
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b06      	cmp	r3, #6
 800329c:	d114      	bne.n	80032c8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	334d      	adds	r3, #77	@ 0x4d
 80032ae:	2202      	movs	r2, #2
 80032b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	334c      	adds	r3, #76	@ 0x4c
 80032c2:	2205      	movs	r2, #5
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e075      	b.n	80033b4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	334d      	adds	r3, #77	@ 0x4d
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b07      	cmp	r3, #7
 80032dc:	d00a      	beq.n	80032f4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	334d      	adds	r3, #77	@ 0x4d
 80032ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032f0:	2b09      	cmp	r3, #9
 80032f2:	d170      	bne.n	80033d6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	334d      	adds	r3, #77	@ 0x4d
 8003304:	2202      	movs	r2, #2
 8003306:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	3344      	adds	r3, #68	@ 0x44
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1c59      	adds	r1, r3, #1
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4403      	add	r3, r0
 8003328:	3344      	adds	r3, #68	@ 0x44
 800332a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3344      	adds	r3, #68	@ 0x44
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d914      	bls.n	800336c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	3344      	adds	r3, #68	@ 0x44
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	334c      	adds	r3, #76	@ 0x4c
 8003366:	2204      	movs	r2, #4
 8003368:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800336a:	e022      	b.n	80033b2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	334c      	adds	r3, #76	@ 0x4c
 800337c:	2202      	movs	r2, #2
 800337e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003396:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800339e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	334c      	adds	r3, #76	@ 0x4c
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f004 ff60 	bl	8008290 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033d0:	e002      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80033d6:	bf00      	nop
  }
}
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b08a      	sub	sp, #40	@ 0x28
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	0c5b      	lsrs	r3, r3, #17
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003412:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d004      	beq.n	8003424 <HCD_RXQLVL_IRQHandler+0x46>
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b05      	cmp	r3, #5
 800341e:	f000 80b6 	beq.w	800358e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003422:	e0b7      	b.n	8003594 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80b3 	beq.w	8003592 <HCD_RXQLVL_IRQHandler+0x1b4>
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	332c      	adds	r3, #44	@ 0x2c
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80a7 	beq.w	8003592 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	3338      	adds	r3, #56	@ 0x38
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	18d1      	adds	r1, r2, r3
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4403      	add	r3, r0
 8003468:	3334      	adds	r3, #52	@ 0x34
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4299      	cmp	r1, r3
 800346e:	f200 8083 	bhi.w	8003578 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	332c      	adds	r3, #44	@ 0x2c
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	b292      	uxth	r2, r2
 800348c:	4619      	mov	r1, r3
 800348e:	f001 fd8b 	bl	8004fa8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	332c      	adds	r3, #44	@ 0x2c
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	18d1      	adds	r1, r2, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4403      	add	r3, r0
 80034b6:	332c      	adds	r3, #44	@ 0x2c
 80034b8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3338      	adds	r3, #56	@ 0x38
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	18d1      	adds	r1, r2, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4403      	add	r3, r0
 80034de:	3338      	adds	r3, #56	@ 0x38
 80034e0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	0cdb      	lsrs	r3, r3, #19
 80034f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3328      	adds	r3, #40	@ 0x28
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4293      	cmp	r3, r2
 8003510:	d13f      	bne.n	8003592 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d03c      	beq.n	8003592 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800352e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003536:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	333c      	adds	r3, #60	@ 0x3c
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	f083 0301 	eor.w	r3, r3, #1
 8003560:	b2d8      	uxtb	r0, r3
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	333c      	adds	r3, #60	@ 0x3c
 8003572:	4602      	mov	r2, r0
 8003574:	701a      	strb	r2, [r3, #0]
      break;
 8003576:	e00c      	b.n	8003592 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	334c      	adds	r3, #76	@ 0x4c
 8003588:	2204      	movs	r2, #4
 800358a:	701a      	strb	r2, [r3, #0]
      break;
 800358c:	e001      	b.n	8003592 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800358e:	bf00      	nop
 8003590:	e000      	b.n	8003594 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003592:	bf00      	nop
  }
}
 8003594:	bf00      	nop
 8003596:	3728      	adds	r7, #40	@ 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80035c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d10b      	bne.n	80035ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d102      	bne.n	80035e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f004 fe3a 	bl	8008258 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f043 0302 	orr.w	r3, r3, #2
 80035ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d132      	bne.n	800365c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f043 0308 	orr.w	r3, r3, #8
 80035fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b04      	cmp	r3, #4
 8003606:	d126      	bne.n	8003656 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	7a5b      	ldrb	r3, [r3, #9]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d113      	bne.n	8003638 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003616:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800361a:	d106      	bne.n	800362a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2102      	movs	r1, #2
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fe56 	bl	80052d4 <USB_InitFSLSPClkSel>
 8003628:	e011      	b.n	800364e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2101      	movs	r1, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f001 fe4f 	bl	80052d4 <USB_InitFSLSPClkSel>
 8003636:	e00a      	b.n	800364e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	79db      	ldrb	r3, [r3, #7]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d106      	bne.n	800364e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003646:	461a      	mov	r2, r3
 8003648:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800364c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f004 fe2c 	bl	80082ac <HAL_HCD_PortEnabled_Callback>
 8003654:	e002      	b.n	800365c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f004 fe36 	bl	80082c8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b20      	cmp	r3, #32
 8003664:	d103      	bne.n	800366e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f043 0320 	orr.w	r3, r3, #32
 800366c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003674:	461a      	mov	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6013      	str	r3, [r2, #0]
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e12b      	b.n	80038ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd f9e4 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2224      	movs	r2, #36	@ 0x24
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e8:	f000 fd80 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 80036ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4a81      	ldr	r2, [pc, #516]	@ (80038f8 <HAL_I2C_Init+0x274>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d807      	bhi.n	8003708 <HAL_I2C_Init+0x84>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a80      	ldr	r2, [pc, #512]	@ (80038fc <HAL_I2C_Init+0x278>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	bf94      	ite	ls
 8003700:	2301      	movls	r3, #1
 8003702:	2300      	movhi	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	e006      	b.n	8003716 <HAL_I2C_Init+0x92>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a7d      	ldr	r2, [pc, #500]	@ (8003900 <HAL_I2C_Init+0x27c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	bf94      	ite	ls
 8003710:	2301      	movls	r3, #1
 8003712:	2300      	movhi	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e0e7      	b.n	80038ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a78      	ldr	r2, [pc, #480]	@ (8003904 <HAL_I2C_Init+0x280>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	0c9b      	lsrs	r3, r3, #18
 8003728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a6a      	ldr	r2, [pc, #424]	@ (80038f8 <HAL_I2C_Init+0x274>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d802      	bhi.n	8003758 <HAL_I2C_Init+0xd4>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	3301      	adds	r3, #1
 8003756:	e009      	b.n	800376c <HAL_I2C_Init+0xe8>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	4a69      	ldr	r2, [pc, #420]	@ (8003908 <HAL_I2C_Init+0x284>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	3301      	adds	r3, #1
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	430b      	orrs	r3, r1
 8003772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800377e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	495c      	ldr	r1, [pc, #368]	@ (80038f8 <HAL_I2C_Init+0x274>)
 8003788:	428b      	cmp	r3, r1
 800378a:	d819      	bhi.n	80037c0 <HAL_I2C_Init+0x13c>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e59      	subs	r1, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	fbb1 f3f3 	udiv	r3, r1, r3
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037a0:	400b      	ands	r3, r1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_I2C_Init+0x138>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1e59      	subs	r1, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ba:	e051      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 80037bc:	2304      	movs	r3, #4
 80037be:	e04f      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d111      	bne.n	80037ec <HAL_I2C_Init+0x168>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1e58      	subs	r0, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	440b      	add	r3, r1
 80037d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e012      	b.n	8003812 <HAL_I2C_Init+0x18e>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	0099      	lsls	r1, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Init+0x196>
 8003816:	2301      	movs	r3, #1
 8003818:	e022      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10e      	bne.n	8003840 <HAL_I2C_Init+0x1bc>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1e58      	subs	r0, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	440b      	add	r3, r1
 8003830:	fbb0 f3f3 	udiv	r3, r0, r3
 8003834:	3301      	adds	r3, #1
 8003836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800383e:	e00f      	b.n	8003860 <HAL_I2C_Init+0x1dc>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e58      	subs	r0, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	0099      	lsls	r1, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	fbb0 f3f3 	udiv	r3, r0, r3
 8003856:	3301      	adds	r3, #1
 8003858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	6809      	ldr	r1, [r1, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800388e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6911      	ldr	r1, [r2, #16]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68d2      	ldr	r2, [r2, #12]
 800389a:	4311      	orrs	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	000186a0 	.word	0x000186a0
 80038fc:	001e847f 	.word	0x001e847f
 8003900:	003d08ff 	.word	0x003d08ff
 8003904:	431bde83 	.word	0x431bde83
 8003908:	10624dd3 	.word	0x10624dd3

0800390c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e267      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d075      	beq.n	8003a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800392a:	4b88      	ldr	r3, [pc, #544]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b04      	cmp	r3, #4
 8003934:	d00c      	beq.n	8003950 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b85      	ldr	r3, [pc, #532]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800393e:	2b08      	cmp	r3, #8
 8003940:	d112      	bne.n	8003968 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003942:	4b82      	ldr	r3, [pc, #520]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800394a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800394e:	d10b      	bne.n	8003968 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	4b7e      	ldr	r3, [pc, #504]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d05b      	beq.n	8003a14 <HAL_RCC_OscConfig+0x108>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d157      	bne.n	8003a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e242      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003970:	d106      	bne.n	8003980 <HAL_RCC_OscConfig+0x74>
 8003972:	4b76      	ldr	r3, [pc, #472]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a75      	ldr	r2, [pc, #468]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e01d      	b.n	80039bc <HAL_RCC_OscConfig+0xb0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x98>
 800398a:	4b70      	ldr	r3, [pc, #448]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b6d      	ldr	r3, [pc, #436]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a6c      	ldr	r2, [pc, #432]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0xb0>
 80039a4:	4b69      	ldr	r3, [pc, #420]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a68      	ldr	r2, [pc, #416]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b66      	ldr	r3, [pc, #408]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a65      	ldr	r2, [pc, #404]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d013      	beq.n	80039ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fd fa56 	bl	8000e74 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fd fa52 	bl	8000e74 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	@ 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e207      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	4b5b      	ldr	r3, [pc, #364]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0xc0>
 80039ea:	e014      	b.n	8003a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fd fa42 	bl	8000e74 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fd fa3e 	bl	8000e74 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e1f3      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	4b51      	ldr	r3, [pc, #324]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0xe8>
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d063      	beq.n	8003aea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a22:	4b4a      	ldr	r3, [pc, #296]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b47      	ldr	r3, [pc, #284]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d11c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3a:	4b44      	ldr	r3, [pc, #272]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	4b41      	ldr	r3, [pc, #260]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_OscConfig+0x152>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e1c7      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4937      	ldr	r1, [pc, #220]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a72:	e03a      	b.n	8003aea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7c:	4b34      	ldr	r3, [pc, #208]	@ (8003b50 <HAL_RCC_OscConfig+0x244>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fd f9f7 	bl	8000e74 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fd f9f3 	bl	8000e74 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e1a8      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b28      	ldr	r3, [pc, #160]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4925      	ldr	r1, [pc, #148]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
 8003abc:	e015      	b.n	8003aea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abe:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <HAL_RCC_OscConfig+0x244>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd f9d6 	bl	8000e74 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003acc:	f7fd f9d2 	bl	8000e74 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e187      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	4b1b      	ldr	r3, [pc, #108]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d036      	beq.n	8003b64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afe:	4b15      	ldr	r3, [pc, #84]	@ (8003b54 <HAL_RCC_OscConfig+0x248>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fd f9b6 	bl	8000e74 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0c:	f7fd f9b2 	bl	8000e74 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e167      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x200>
 8003b2a:	e01b      	b.n	8003b64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b2c:	4b09      	ldr	r3, [pc, #36]	@ (8003b54 <HAL_RCC_OscConfig+0x248>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b32:	f7fd f99f 	bl	8000e74 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	e00e      	b.n	8003b58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7fd f99b 	bl	8000e74 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d907      	bls.n	8003b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e150      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	42470000 	.word	0x42470000
 8003b54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	4b88      	ldr	r3, [pc, #544]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1ea      	bne.n	8003b3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8097 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b76:	4b81      	ldr	r3, [pc, #516]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	4b7d      	ldr	r3, [pc, #500]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b92:	4b7a      	ldr	r3, [pc, #488]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba2:	4b77      	ldr	r3, [pc, #476]	@ (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d118      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bae:	4b74      	ldr	r3, [pc, #464]	@ (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a73      	ldr	r2, [pc, #460]	@ (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bba:	f7fd f95b 	bl	8000e74 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc2:	f7fd f957 	bl	8000e74 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e10c      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x2ea>
 8003be8:	4b64      	ldr	r3, [pc, #400]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bec:	4a63      	ldr	r2, [pc, #396]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf4:	e01c      	b.n	8003c30 <HAL_RCC_OscConfig+0x324>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x30c>
 8003bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	4a5e      	ldr	r2, [pc, #376]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c04:	f043 0304 	orr.w	r3, r3, #4
 8003c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c16:	e00b      	b.n	8003c30 <HAL_RCC_OscConfig+0x324>
 8003c18:	4b58      	ldr	r3, [pc, #352]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1c:	4a57      	ldr	r2, [pc, #348]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c24:	4b55      	ldr	r3, [pc, #340]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c28:	4a54      	ldr	r2, [pc, #336]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c2a:	f023 0304 	bic.w	r3, r3, #4
 8003c2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d015      	beq.n	8003c64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7fd f91c 	bl	8000e74 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f7fd f918 	bl	8000e74 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0cb      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c56:	4b49      	ldr	r3, [pc, #292]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0ee      	beq.n	8003c40 <HAL_RCC_OscConfig+0x334>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c64:	f7fd f906 	bl	8000e74 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6c:	f7fd f902 	bl	8000e74 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e0b5      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c82:	4b3e      	ldr	r3, [pc, #248]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1ee      	bne.n	8003c6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c94:	4b39      	ldr	r3, [pc, #228]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	4a38      	ldr	r2, [pc, #224]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80a1 	beq.w	8003dec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003caa:	4b34      	ldr	r3, [pc, #208]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d05c      	beq.n	8003d70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d141      	bne.n	8003d42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbe:	4b31      	ldr	r3, [pc, #196]	@ (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fd f8d6 	bl	8000e74 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fd f8d2 	bl	8000e74 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e087      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cde:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	3b01      	subs	r3, #1
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	491b      	ldr	r1, [pc, #108]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d14:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7fd f8ab 	bl	8000e74 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d22:	f7fd f8a7 	bl	8000e74 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e05c      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d34:	4b11      	ldr	r3, [pc, #68]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x416>
 8003d40:	e054      	b.n	8003dec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fd f894 	bl	8000e74 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fd f890 	bl	8000e74 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e045      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x444>
 8003d6e:	e03d      	b.n	8003dec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e038      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40007000 	.word	0x40007000
 8003d84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d88:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <HAL_RCC_OscConfig+0x4ec>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d028      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d121      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d11a      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003db8:	4013      	ands	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d111      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800

08003dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0cc      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b68      	ldr	r3, [pc, #416]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d90c      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b65      	ldr	r3, [pc, #404]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b63      	ldr	r3, [pc, #396]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0b8      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e50:	4b59      	ldr	r3, [pc, #356]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a58      	ldr	r2, [pc, #352]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e68:	4b53      	ldr	r3, [pc, #332]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4a52      	ldr	r2, [pc, #328]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e74:	4b50      	ldr	r3, [pc, #320]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	494d      	ldr	r1, [pc, #308]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d044      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b47      	ldr	r3, [pc, #284]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d119      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e07f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eba:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e06f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eca:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e067      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eda:	4b37      	ldr	r3, [pc, #220]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f023 0203 	bic.w	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4934      	ldr	r1, [pc, #208]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eec:	f7fc ffc2 	bl	8000e74 <HAL_GetTick>
 8003ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef4:	f7fc ffbe 	bl	8000e74 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e04f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 020c 	and.w	r2, r3, #12
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d1eb      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b25      	ldr	r3, [pc, #148]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d20c      	bcs.n	8003f44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b22      	ldr	r3, [pc, #136]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b20      	ldr	r3, [pc, #128]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e032      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f50:	4b19      	ldr	r3, [pc, #100]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4916      	ldr	r1, [pc, #88]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6e:	4b12      	ldr	r3, [pc, #72]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	490e      	ldr	r1, [pc, #56]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f82:	f000 f821 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8003f86:	4602      	mov	r2, r0
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	490a      	ldr	r1, [pc, #40]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c0>)
 8003f94:	5ccb      	ldrb	r3, [r1, r3]
 8003f96:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9a:	4a09      	ldr	r2, [pc, #36]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f9e:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fc ff22 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40023c00 	.word	0x40023c00
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	08008960 	.word	0x08008960
 8003fc0:	20000000 	.word	0x20000000
 8003fc4:	20000004 	.word	0x20000004

08003fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b094      	sub	sp, #80	@ 0x50
 8003fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe0:	4b79      	ldr	r3, [pc, #484]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d00d      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x40>
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	f200 80e1 	bhi.w	80041b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x34>
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ffa:	e0db      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ffc:	4b73      	ldr	r3, [pc, #460]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004000:	e0db      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004002:	4b73      	ldr	r3, [pc, #460]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004004:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004006:	e0d8      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004008:	4b6f      	ldr	r3, [pc, #444]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004010:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004012:	4b6d      	ldr	r3, [pc, #436]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d063      	beq.n	80040e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401e:	4b6a      	ldr	r3, [pc, #424]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	099b      	lsrs	r3, r3, #6
 8004024:	2200      	movs	r2, #0
 8004026:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004028:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800402a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004030:	633b      	str	r3, [r7, #48]	@ 0x30
 8004032:	2300      	movs	r3, #0
 8004034:	637b      	str	r3, [r7, #52]	@ 0x34
 8004036:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	f04f 0000 	mov.w	r0, #0
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	0159      	lsls	r1, r3, #5
 8004048:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800404c:	0150      	lsls	r0, r2, #5
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4621      	mov	r1, r4
 8004054:	1a51      	subs	r1, r2, r1
 8004056:	6139      	str	r1, [r7, #16]
 8004058:	4629      	mov	r1, r5
 800405a:	eb63 0301 	sbc.w	r3, r3, r1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800406c:	4659      	mov	r1, fp
 800406e:	018b      	lsls	r3, r1, #6
 8004070:	4651      	mov	r1, sl
 8004072:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004076:	4651      	mov	r1, sl
 8004078:	018a      	lsls	r2, r1, #6
 800407a:	4651      	mov	r1, sl
 800407c:	ebb2 0801 	subs.w	r8, r2, r1
 8004080:	4659      	mov	r1, fp
 8004082:	eb63 0901 	sbc.w	r9, r3, r1
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800409a:	4690      	mov	r8, r2
 800409c:	4699      	mov	r9, r3
 800409e:	4623      	mov	r3, r4
 80040a0:	eb18 0303 	adds.w	r3, r8, r3
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	462b      	mov	r3, r5
 80040a8:	eb49 0303 	adc.w	r3, r9, r3
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040ba:	4629      	mov	r1, r5
 80040bc:	024b      	lsls	r3, r1, #9
 80040be:	4621      	mov	r1, r4
 80040c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040c4:	4621      	mov	r1, r4
 80040c6:	024a      	lsls	r2, r1, #9
 80040c8:	4610      	mov	r0, r2
 80040ca:	4619      	mov	r1, r3
 80040cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ce:	2200      	movs	r2, #0
 80040d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040d8:	f7fc f876 	bl	80001c8 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4613      	mov	r3, r2
 80040e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e4:	e058      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e6:	4b38      	ldr	r3, [pc, #224]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	099b      	lsrs	r3, r3, #6
 80040ec:	2200      	movs	r2, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	4611      	mov	r1, r2
 80040f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040f6:	623b      	str	r3, [r7, #32]
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	f04f 0000 	mov.w	r0, #0
 8004108:	f04f 0100 	mov.w	r1, #0
 800410c:	0159      	lsls	r1, r3, #5
 800410e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004112:	0150      	lsls	r0, r2, #5
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4641      	mov	r1, r8
 800411a:	ebb2 0a01 	subs.w	sl, r2, r1
 800411e:	4649      	mov	r1, r9
 8004120:	eb63 0b01 	sbc.w	fp, r3, r1
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004130:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004134:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004138:	ebb2 040a 	subs.w	r4, r2, sl
 800413c:	eb63 050b 	sbc.w	r5, r3, fp
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	00eb      	lsls	r3, r5, #3
 800414a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800414e:	00e2      	lsls	r2, r4, #3
 8004150:	4614      	mov	r4, r2
 8004152:	461d      	mov	r5, r3
 8004154:	4643      	mov	r3, r8
 8004156:	18e3      	adds	r3, r4, r3
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	464b      	mov	r3, r9
 800415c:	eb45 0303 	adc.w	r3, r5, r3
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800416e:	4629      	mov	r1, r5
 8004170:	028b      	lsls	r3, r1, #10
 8004172:	4621      	mov	r1, r4
 8004174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004178:	4621      	mov	r1, r4
 800417a:	028a      	lsls	r2, r1, #10
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004182:	2200      	movs	r2, #0
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	61fa      	str	r2, [r7, #28]
 8004188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800418c:	f7fc f81c 	bl	80001c8 <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4613      	mov	r3, r2
 8004196:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004198:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	3301      	adds	r3, #1
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041b2:	e002      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b4:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x204>)
 80041b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3750      	adds	r7, #80	@ 0x50
 80041c0:	46bd      	mov	sp, r7
 80041c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	00f42400 	.word	0x00f42400
 80041d0:	007a1200 	.word	0x007a1200

080041d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d8:	4b03      	ldr	r3, [pc, #12]	@ (80041e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041da:	681b      	ldr	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20000000 	.word	0x20000000

080041ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041f0:	f7ff fff0 	bl	80041d4 <HAL_RCC_GetHCLKFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b05      	ldr	r3, [pc, #20]	@ (800420c <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	0a9b      	lsrs	r3, r3, #10
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	4903      	ldr	r1, [pc, #12]	@ (8004210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004202:	5ccb      	ldrb	r3, [r1, r3]
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40023800 	.word	0x40023800
 8004210:	08008970 	.word	0x08008970

08004214 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e07b      	b.n	800431e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d108      	bne.n	8004240 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004236:	d009      	beq.n	800424c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	61da      	str	r2, [r3, #28]
 800423e:	e005      	b.n	800424c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fc fc4e 	bl	8000b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004282:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d0:	ea42 0103 	orr.w	r1, r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	0c1b      	lsrs	r3, r3, #16
 80042ea:	f003 0104 	and.w	r1, r3, #4
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f2:	f003 0210 	and.w	r2, r3, #16
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800430c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e041      	b.n	80043bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fc fc23 	bl	8000b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3304      	adds	r3, #4
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f000 f9b7 	bl	80046d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <HAL_TIM_PWM_Start+0x24>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	bf14      	ite	ne
 80043e0:	2301      	movne	r3, #1
 80043e2:	2300      	moveq	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	e022      	b.n	800442e <HAL_TIM_PWM_Start+0x6a>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d109      	bne.n	8004402 <HAL_TIM_PWM_Start+0x3e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	bf14      	ite	ne
 80043fa:	2301      	movne	r3, #1
 80043fc:	2300      	moveq	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	e015      	b.n	800442e <HAL_TIM_PWM_Start+0x6a>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d109      	bne.n	800441c <HAL_TIM_PWM_Start+0x58>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e008      	b.n	800442e <HAL_TIM_PWM_Start+0x6a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e07c      	b.n	8004530 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <HAL_TIM_PWM_Start+0x82>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004444:	e013      	b.n	800446e <HAL_TIM_PWM_Start+0xaa>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b04      	cmp	r3, #4
 800444a:	d104      	bne.n	8004456 <HAL_TIM_PWM_Start+0x92>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004454:	e00b      	b.n	800446e <HAL_TIM_PWM_Start+0xaa>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b08      	cmp	r3, #8
 800445a:	d104      	bne.n	8004466 <HAL_TIM_PWM_Start+0xa2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004464:	e003      	b.n	800446e <HAL_TIM_PWM_Start+0xaa>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2202      	movs	r2, #2
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2201      	movs	r2, #1
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fb84 	bl	8004b84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2d      	ldr	r2, [pc, #180]	@ (8004538 <HAL_TIM_PWM_Start+0x174>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_TIM_PWM_Start+0xcc>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2c      	ldr	r2, [pc, #176]	@ (800453c <HAL_TIM_PWM_Start+0x178>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d101      	bne.n	8004494 <HAL_TIM_PWM_Start+0xd0>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_TIM_PWM_Start+0xd2>
 8004494:	2300      	movs	r3, #0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a22      	ldr	r2, [pc, #136]	@ (8004538 <HAL_TIM_PWM_Start+0x174>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d022      	beq.n	80044fa <HAL_TIM_PWM_Start+0x136>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044bc:	d01d      	beq.n	80044fa <HAL_TIM_PWM_Start+0x136>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004540 <HAL_TIM_PWM_Start+0x17c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d018      	beq.n	80044fa <HAL_TIM_PWM_Start+0x136>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004544 <HAL_TIM_PWM_Start+0x180>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d013      	beq.n	80044fa <HAL_TIM_PWM_Start+0x136>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004548 <HAL_TIM_PWM_Start+0x184>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00e      	beq.n	80044fa <HAL_TIM_PWM_Start+0x136>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a16      	ldr	r2, [pc, #88]	@ (800453c <HAL_TIM_PWM_Start+0x178>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d009      	beq.n	80044fa <HAL_TIM_PWM_Start+0x136>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a18      	ldr	r2, [pc, #96]	@ (800454c <HAL_TIM_PWM_Start+0x188>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d004      	beq.n	80044fa <HAL_TIM_PWM_Start+0x136>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <HAL_TIM_PWM_Start+0x18c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d111      	bne.n	800451e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b06      	cmp	r3, #6
 800450a:	d010      	beq.n	800452e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451c:	e007      	b.n	800452e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40010000 	.word	0x40010000
 800453c:	40010400 	.word	0x40010400
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40014000 	.word	0x40014000
 8004550:	40001800 	.word	0x40001800

08004554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800456e:	2302      	movs	r3, #2
 8004570:	e0ae      	b.n	80046d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b0c      	cmp	r3, #12
 800457e:	f200 809f 	bhi.w	80046c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004582:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	080045bd 	.word	0x080045bd
 800458c:	080046c1 	.word	0x080046c1
 8004590:	080046c1 	.word	0x080046c1
 8004594:	080046c1 	.word	0x080046c1
 8004598:	080045fd 	.word	0x080045fd
 800459c:	080046c1 	.word	0x080046c1
 80045a0:	080046c1 	.word	0x080046c1
 80045a4:	080046c1 	.word	0x080046c1
 80045a8:	0800463f 	.word	0x0800463f
 80045ac:	080046c1 	.word	0x080046c1
 80045b0:	080046c1 	.word	0x080046c1
 80045b4:	080046c1 	.word	0x080046c1
 80045b8:	0800467f 	.word	0x0800467f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 f92e 	bl	8004824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0208 	orr.w	r2, r2, #8
 80045d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0204 	bic.w	r2, r2, #4
 80045e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6999      	ldr	r1, [r3, #24]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	619a      	str	r2, [r3, #24]
      break;
 80045fa:	e064      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 f97e 	bl	8004904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6999      	ldr	r1, [r3, #24]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	021a      	lsls	r2, r3, #8
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	619a      	str	r2, [r3, #24]
      break;
 800463c:	e043      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 f9d3 	bl	80049f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0208 	orr.w	r2, r2, #8
 8004658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0204 	bic.w	r2, r2, #4
 8004668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69d9      	ldr	r1, [r3, #28]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	61da      	str	r2, [r3, #28]
      break;
 800467c:	e023      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fa27 	bl	8004ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69d9      	ldr	r1, [r3, #28]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	021a      	lsls	r2, r3, #8
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	61da      	str	r2, [r3, #28]
      break;
 80046be:	e002      	b.n	80046c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
      break;
 80046c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a43      	ldr	r2, [pc, #268]	@ (80047f8 <TIM_Base_SetConfig+0x120>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f6:	d00f      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a40      	ldr	r2, [pc, #256]	@ (80047fc <TIM_Base_SetConfig+0x124>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00b      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a3f      	ldr	r2, [pc, #252]	@ (8004800 <TIM_Base_SetConfig+0x128>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d007      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a3e      	ldr	r2, [pc, #248]	@ (8004804 <TIM_Base_SetConfig+0x12c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_Base_SetConfig+0x40>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a3d      	ldr	r2, [pc, #244]	@ (8004808 <TIM_Base_SetConfig+0x130>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d108      	bne.n	800472a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a32      	ldr	r2, [pc, #200]	@ (80047f8 <TIM_Base_SetConfig+0x120>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d02b      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004738:	d027      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a2f      	ldr	r2, [pc, #188]	@ (80047fc <TIM_Base_SetConfig+0x124>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d023      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a2e      	ldr	r2, [pc, #184]	@ (8004800 <TIM_Base_SetConfig+0x128>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d01f      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a2d      	ldr	r2, [pc, #180]	@ (8004804 <TIM_Base_SetConfig+0x12c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01b      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a2c      	ldr	r2, [pc, #176]	@ (8004808 <TIM_Base_SetConfig+0x130>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d017      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a2b      	ldr	r2, [pc, #172]	@ (800480c <TIM_Base_SetConfig+0x134>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2a      	ldr	r2, [pc, #168]	@ (8004810 <TIM_Base_SetConfig+0x138>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00f      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a29      	ldr	r2, [pc, #164]	@ (8004814 <TIM_Base_SetConfig+0x13c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a28      	ldr	r2, [pc, #160]	@ (8004818 <TIM_Base_SetConfig+0x140>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a27      	ldr	r2, [pc, #156]	@ (800481c <TIM_Base_SetConfig+0x144>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_Base_SetConfig+0xb2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a26      	ldr	r2, [pc, #152]	@ (8004820 <TIM_Base_SetConfig+0x148>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d108      	bne.n	800479c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a0e      	ldr	r2, [pc, #56]	@ (80047f8 <TIM_Base_SetConfig+0x120>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_Base_SetConfig+0xf2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a10      	ldr	r2, [pc, #64]	@ (8004808 <TIM_Base_SetConfig+0x130>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d103      	bne.n	80047d2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f043 0204 	orr.w	r2, r3, #4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	601a      	str	r2, [r3, #0]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40010400 	.word	0x40010400
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800
 8004818:	40001800 	.word	0x40001800
 800481c:	40001c00 	.word	0x40001c00
 8004820:	40002000 	.word	0x40002000

08004824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f023 0201 	bic.w	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f023 0302 	bic.w	r3, r3, #2
 800486c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a20      	ldr	r2, [pc, #128]	@ (80048fc <TIM_OC1_SetConfig+0xd8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_OC1_SetConfig+0x64>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a1f      	ldr	r2, [pc, #124]	@ (8004900 <TIM_OC1_SetConfig+0xdc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d10c      	bne.n	80048a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0308 	bic.w	r3, r3, #8
 800488e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f023 0304 	bic.w	r3, r3, #4
 80048a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a15      	ldr	r2, [pc, #84]	@ (80048fc <TIM_OC1_SetConfig+0xd8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_OC1_SetConfig+0x8e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a14      	ldr	r2, [pc, #80]	@ (8004900 <TIM_OC1_SetConfig+0xdc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d111      	bne.n	80048d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	621a      	str	r2, [r3, #32]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40010000 	.word	0x40010000
 8004900:	40010400 	.word	0x40010400

08004904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f023 0210 	bic.w	r2, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0320 	bic.w	r3, r3, #32
 800494e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a22      	ldr	r2, [pc, #136]	@ (80049e8 <TIM_OC2_SetConfig+0xe4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_OC2_SetConfig+0x68>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a21      	ldr	r2, [pc, #132]	@ (80049ec <TIM_OC2_SetConfig+0xe8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10d      	bne.n	8004988 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004986:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a17      	ldr	r2, [pc, #92]	@ (80049e8 <TIM_OC2_SetConfig+0xe4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_OC2_SetConfig+0x94>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <TIM_OC2_SetConfig+0xe8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d113      	bne.n	80049c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800499e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40010400 	.word	0x40010400

080049f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a21      	ldr	r2, [pc, #132]	@ (8004ad0 <TIM_OC3_SetConfig+0xe0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d003      	beq.n	8004a56 <TIM_OC3_SetConfig+0x66>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a20      	ldr	r2, [pc, #128]	@ (8004ad4 <TIM_OC3_SetConfig+0xe4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d10d      	bne.n	8004a72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a16      	ldr	r2, [pc, #88]	@ (8004ad0 <TIM_OC3_SetConfig+0xe0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_OC3_SetConfig+0x92>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a15      	ldr	r2, [pc, #84]	@ (8004ad4 <TIM_OC3_SetConfig+0xe4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d113      	bne.n	8004aaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	621a      	str	r2, [r3, #32]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40010400 	.word	0x40010400

08004ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	031b      	lsls	r3, r3, #12
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <TIM_OC4_SetConfig+0xa4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_OC4_SetConfig+0x68>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a11      	ldr	r2, [pc, #68]	@ (8004b80 <TIM_OC4_SetConfig+0xa8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d109      	bne.n	8004b54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	019b      	lsls	r3, r3, #6
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40010400 	.word	0x40010400

08004b84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 031f 	and.w	r3, r3, #31
 8004b96:	2201      	movs	r2, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1a      	ldr	r2, [r3, #32]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	621a      	str	r2, [r3, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e05a      	b.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a21      	ldr	r2, [pc, #132]	@ (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d022      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c34:	d01d      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d018      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00e      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a18      	ldr	r2, [pc, #96]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a17      	ldr	r2, [pc, #92]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a15      	ldr	r2, [pc, #84]	@ (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10c      	bne.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800
 8004cb8:	40000c00 	.word	0x40000c00
 8004cbc:	40010400 	.word	0x40010400
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40001800 	.word	0x40001800

08004cc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc8:	b084      	sub	sp, #16
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	f107 001c 	add.w	r0, r7, #28
 8004cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d123      	bne.n	8004d2a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004cf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d105      	bne.n	8004d1e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f9dc 	bl	80050dc <USB_CoreReset>
 8004d24:	4603      	mov	r3, r0
 8004d26:	73fb      	strb	r3, [r7, #15]
 8004d28:	e01b      	b.n	8004d62 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f9d0 	bl	80050dc <USB_CoreReset>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d106      	bne.n	8004d56 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d54:	e005      	b.n	8004d62 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d62:	7fbb      	ldrb	r3, [r7, #30]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d10b      	bne.n	8004d80 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f043 0206 	orr.w	r2, r3, #6
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d8c:	b004      	add	sp, #16
 8004d8e:	4770      	bx	lr

08004d90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d115      	bne.n	8004e22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e02:	200a      	movs	r0, #10
 8004e04:	f7fc f842 	bl	8000e8c <HAL_Delay>
      ms += 10U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	330a      	adds	r3, #10
 8004e0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f956 	bl	80050c0 <USB_GetMode>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d01e      	beq.n	8004e58 <USB_SetCurrentMode+0x84>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e1e:	d9f0      	bls.n	8004e02 <USB_SetCurrentMode+0x2e>
 8004e20:	e01a      	b.n	8004e58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d115      	bne.n	8004e54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e34:	200a      	movs	r0, #10
 8004e36:	f7fc f829 	bl	8000e8c <HAL_Delay>
      ms += 10U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	330a      	adds	r3, #10
 8004e3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f93d 	bl	80050c0 <USB_GetMode>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <USB_SetCurrentMode+0x84>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e50:	d9f0      	bls.n	8004e34 <USB_SetCurrentMode+0x60>
 8004e52:	e001      	b.n	8004e58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e005      	b.n	8004e64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8004e5c:	d101      	bne.n	8004e62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e86:	d901      	bls.n	8004e8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e01b      	b.n	8004ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	daf2      	bge.n	8004e7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	019b      	lsls	r3, r3, #6
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004eb0:	d901      	bls.n	8004eb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e006      	b.n	8004ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d0f0      	beq.n	8004ea4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ee8:	d901      	bls.n	8004eee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e018      	b.n	8004f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	daf2      	bge.n	8004edc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2210      	movs	r2, #16
 8004efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3301      	adds	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f0c:	d901      	bls.n	8004f12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e006      	b.n	8004f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b10      	cmp	r3, #16
 8004f1c:	d0f0      	beq.n	8004f00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	@ 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	4611      	mov	r1, r2
 8004f38:	461a      	mov	r2, r3
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	71fb      	strb	r3, [r7, #7]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d123      	bne.n	8004f9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f52:	88bb      	ldrh	r3, [r7, #4]
 8004f54:	3303      	adds	r3, #3
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e018      	b.n	8004f92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	031a      	lsls	r2, r3, #12
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	3301      	adds	r3, #1
 8004f78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	3301      	adds	r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3e2      	bcc.n	8004f60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3724      	adds	r7, #36	@ 0x24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b08b      	sub	sp, #44	@ 0x2c
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	089b      	lsrs	r3, r3, #2
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	e014      	b.n	8004ffe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	3301      	adds	r3, #1
 8004fea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	6a3a      	ldr	r2, [r7, #32]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	429a      	cmp	r2, r3
 8005004:	d3e6      	bcc.n	8004fd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005006:	8bfb      	ldrh	r3, [r7, #30]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01e      	beq.n	800504a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005016:	461a      	mov	r2, r3
 8005018:	f107 0310 	add.w	r3, r7, #16
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
 800502c:	b2da      	uxtb	r2, r3
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	701a      	strb	r2, [r3, #0]
      i++;
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	3301      	adds	r3, #1
 8005036:	623b      	str	r3, [r7, #32]
      pDest++;
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	3301      	adds	r3, #1
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800503e:	8bfb      	ldrh	r3, [r7, #30]
 8005040:	3b01      	subs	r3, #1
 8005042:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005044:	8bfb      	ldrh	r3, [r7, #30]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1ea      	bne.n	8005020 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800504c:	4618      	mov	r0, r3
 800504e:	372c      	adds	r7, #44	@ 0x2c
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4013      	ands	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005070:	68fb      	ldr	r3, [r7, #12]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050b2:	68bb      	ldr	r3, [r7, #8]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f003 0301 	and.w	r3, r3, #1
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3301      	adds	r3, #1
 80050ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050f4:	d901      	bls.n	80050fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e022      	b.n	8005140 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	daf2      	bge.n	80050e8 <USB_CoreReset+0xc>

  count = 10U;
 8005102:	230a      	movs	r3, #10
 8005104:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005106:	e002      	b.n	800510e <USB_CoreReset+0x32>
  {
    count--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3b01      	subs	r3, #1
 800510c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f9      	bne.n	8005108 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f043 0201 	orr.w	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3301      	adds	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800512c:	d901      	bls.n	8005132 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e006      	b.n	8005140 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	d0f0      	beq.n	8005120 <USB_CoreReset+0x44>

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800514c:	b084      	sub	sp, #16
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800515a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800516c:	461a      	mov	r2, r3
 800516e:	2300      	movs	r3, #0
 8005170:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005176:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005182:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d119      	bne.n	80051d6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80051a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d10a      	bne.n	80051c0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80051b8:	f043 0304 	orr.w	r3, r3, #4
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	e014      	b.n	80051ea <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80051ce:	f023 0304 	bic.w	r3, r3, #4
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	e009      	b.n	80051ea <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80051e4:	f023 0304 	bic.w	r3, r3, #4
 80051e8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051ea:	2110      	movs	r1, #16
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff fe3d 	bl	8004e6c <USB_FlushTxFifo>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fe67 	bl	8004ed0 <USB_FlushRxFifo>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	e015      	b.n	800523e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521e:	461a      	mov	r2, r3
 8005220:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005224:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005232:	461a      	mov	r2, r3
 8005234:	2300      	movs	r3, #0
 8005236:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	3301      	adds	r3, #1
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005242:	461a      	mov	r2, r3
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4293      	cmp	r3, r2
 8005248:	d3e3      	bcc.n	8005212 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005256:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a18      	ldr	r2, [pc, #96]	@ (80052bc <USB_HostInit+0x170>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d10b      	bne.n	8005278 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005266:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a15      	ldr	r2, [pc, #84]	@ (80052c0 <USB_HostInit+0x174>)
 800526c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a14      	ldr	r2, [pc, #80]	@ (80052c4 <USB_HostInit+0x178>)
 8005272:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005276:	e009      	b.n	800528c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2280      	movs	r2, #128	@ 0x80
 800527c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a11      	ldr	r2, [pc, #68]	@ (80052c8 <USB_HostInit+0x17c>)
 8005282:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a11      	ldr	r2, [pc, #68]	@ (80052cc <USB_HostInit+0x180>)
 8005288:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800528c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f043 0210 	orr.w	r2, r3, #16
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	4b0a      	ldr	r3, [pc, #40]	@ (80052d0 <USB_HostInit+0x184>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80052ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052b8:	b004      	add	sp, #16
 80052ba:	4770      	bx	lr
 80052bc:	40040000 	.word	0x40040000
 80052c0:	01000200 	.word	0x01000200
 80052c4:	00e00300 	.word	0x00e00300
 80052c8:	00600080 	.word	0x00600080
 80052cc:	004000e0 	.word	0x004000e0
 80052d0:	a3200008 	.word	0xa3200008

080052d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800530c:	4313      	orrs	r3, r2
 800530e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d107      	bne.n	8005326 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800531c:	461a      	mov	r2, r3
 800531e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005322:	6053      	str	r3, [r2, #4]
 8005324:	e00c      	b.n	8005340 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d107      	bne.n	800533c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005332:	461a      	mov	r2, r3
 8005334:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005338:	6053      	str	r3, [r2, #4]
 800533a:	e001      	b.n	8005340 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800536e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800537c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800537e:	2064      	movs	r0, #100	@ 0x64
 8005380:	f7fb fd84 	bl	8000e8c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800538c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005390:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005392:	200a      	movs	r0, #10
 8005394:	f7fb fd7a 	bl	8000e8c <HAL_Delay>

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80053c6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <USB_DriveVbus+0x44>
 80053d2:	78fb      	ldrb	r3, [r7, #3]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d106      	bne.n	80053e6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80053e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80053e4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f0:	d109      	bne.n	8005406 <USB_DriveVbus+0x64>
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005400:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005404:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	0c5b      	lsrs	r3, r3, #17
 8005432:	f003 0303 	and.w	r3, r3, #3
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	b29b      	uxth	r3, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	4608      	mov	r0, r1
 800546e:	4611      	mov	r1, r2
 8005470:	461a      	mov	r2, r3
 8005472:	4603      	mov	r3, r0
 8005474:	70fb      	strb	r3, [r7, #3]
 8005476:	460b      	mov	r3, r1
 8005478:	70bb      	strb	r3, [r7, #2]
 800547a:	4613      	mov	r3, r2
 800547c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4413      	add	r3, r2
 800548e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005492:	461a      	mov	r2, r3
 8005494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005498:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800549a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d87c      	bhi.n	800559c <USB_HC_Init+0x138>
 80054a2:	a201      	add	r2, pc, #4	@ (adr r2, 80054a8 <USB_HC_Init+0x44>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	0800555f 	.word	0x0800555f
 80054b0:	080054b9 	.word	0x080054b9
 80054b4:	08005521 	.word	0x08005521
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c4:	461a      	mov	r2, r3
 80054c6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80054ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80054cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	da10      	bge.n	80054f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	0151      	lsls	r1, r2, #5
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	440a      	add	r2, r1
 80054ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054f2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80054f4:	e055      	b.n	80055a2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a6f      	ldr	r2, [pc, #444]	@ (80056b8 <USB_HC_Init+0x254>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d151      	bne.n	80055a2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4413      	add	r3, r2
 8005506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	440a      	add	r2, r1
 8005514:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005518:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800551c:	60d3      	str	r3, [r2, #12]
      break;
 800551e:	e040      	b.n	80055a2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4413      	add	r3, r2
 8005528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800552c:	461a      	mov	r2, r3
 800552e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005532:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005534:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	da34      	bge.n	80055a6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4413      	add	r3, r2
 8005544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	440a      	add	r2, r1
 8005552:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800555a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800555c:	e023      	b.n	80055a6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800556a:	461a      	mov	r2, r3
 800556c:	f240 2325 	movw	r3, #549	@ 0x225
 8005570:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005572:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005576:	2b00      	cmp	r3, #0
 8005578:	da17      	bge.n	80055aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4413      	add	r3, r2
 8005582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	78fa      	ldrb	r2, [r7, #3]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	440a      	add	r2, r1
 8005590:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005594:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005598:	60d3      	str	r3, [r2, #12]
      }
      break;
 800559a:	e006      	b.n	80055aa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	77fb      	strb	r3, [r7, #31]
      break;
 80055a0:	e004      	b.n	80055ac <USB_HC_Init+0x148>
      break;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <USB_HC_Init+0x148>
      break;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <USB_HC_Init+0x148>
      break;
 80055aa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055b8:	461a      	mov	r2, r3
 80055ba:	2300      	movs	r3, #0
 80055bc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055d8:	f043 0302 	orr.w	r3, r3, #2
 80055dc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	2101      	movs	r1, #1
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	6939      	ldr	r1, [r7, #16]
 80055f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055f8:	4313      	orrs	r3, r2
 80055fa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005608:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800560c:	2b00      	cmp	r3, #0
 800560e:	da03      	bge.n	8005618 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005610:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	e001      	b.n	800561c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff fef9 	bl	8005414 <USB_GetHostSpeed>
 8005622:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005624:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005628:	2b02      	cmp	r3, #2
 800562a:	d106      	bne.n	800563a <USB_HC_Init+0x1d6>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d003      	beq.n	800563a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005632:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e001      	b.n	800563e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800563e:	787b      	ldrb	r3, [r7, #1]
 8005640:	059b      	lsls	r3, r3, #22
 8005642:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005646:	78bb      	ldrb	r3, [r7, #2]
 8005648:	02db      	lsls	r3, r3, #11
 800564a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800564e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005650:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005654:	049b      	lsls	r3, r3, #18
 8005656:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800565a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800565c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800565e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005662:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	431a      	orrs	r2, r3
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	440a      	add	r2, r1
 8005674:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005678:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800567c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800567e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005682:	2b03      	cmp	r3, #3
 8005684:	d003      	beq.n	800568e <USB_HC_Init+0x22a>
 8005686:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d10f      	bne.n	80056ae <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4413      	add	r3, r2
 8005696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	78fa      	ldrb	r2, [r7, #3]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80056ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40040000 	.word	0x40040000

080056bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08c      	sub	sp, #48	@ 0x30
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	785b      	ldrb	r3, [r3, #1]
 80056d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80056d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056d8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005854 <USB_HC_StartXfer+0x198>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d12f      	bne.n	8005742 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d11c      	bne.n	8005722 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	7c9b      	ldrb	r3, [r3, #18]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <USB_HC_StartXfer+0x3c>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	7c9b      	ldrb	r3, [r3, #18]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d124      	bne.n	8005742 <USB_HC_StartXfer+0x86>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	799b      	ldrb	r3, [r3, #6]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d120      	bne.n	8005742 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	4413      	add	r3, r2
 8005708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	440a      	add	r2, r1
 8005716:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800571a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571e:	60d3      	str	r3, [r2, #12]
 8005720:	e00f      	b.n	8005742 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	791b      	ldrb	r3, [r3, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <USB_HC_StartXfer+0x86>
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	795b      	ldrb	r3, [r3, #5]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d107      	bne.n	8005742 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	4619      	mov	r1, r3
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fb6b 	bl	8005e14 <USB_DoPing>
        return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e232      	b.n	8005ba8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	799b      	ldrb	r3, [r3, #6]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d158      	bne.n	80057fc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800574a:	2301      	movs	r3, #1
 800574c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	78db      	ldrb	r3, [r3, #3]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005756:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	8a92      	ldrh	r2, [r2, #20]
 800575c:	fb03 f202 	mul.w	r2, r3, r2
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	61da      	str	r2, [r3, #28]
 8005764:	e07c      	b.n	8005860 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	7c9b      	ldrb	r3, [r3, #18]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d130      	bne.n	80057d0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	2bbc      	cmp	r3, #188	@ 0xbc
 8005774:	d918      	bls.n	80057a8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	8a9b      	ldrh	r3, [r3, #20]
 800577a:	461a      	mov	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d003      	beq.n	8005798 <USB_HC_StartXfer+0xdc>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d103      	bne.n	80057a0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2202      	movs	r2, #2
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	e05f      	b.n	8005860 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2201      	movs	r2, #1
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	e05b      	b.n	8005860 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6a1a      	ldr	r2, [r3, #32]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d007      	beq.n	80057c8 <USB_HC_StartXfer+0x10c>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d003      	beq.n	80057c8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2204      	movs	r2, #4
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	e04b      	b.n	8005860 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2203      	movs	r2, #3
 80057cc:	60da      	str	r2, [r3, #12]
 80057ce:	e047      	b.n	8005860 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d10d      	bne.n	80057f2 <USB_HC_StartXfer+0x136>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	8a92      	ldrh	r2, [r2, #20]
 80057de:	4293      	cmp	r3, r2
 80057e0:	d907      	bls.n	80057f2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	8a92      	ldrh	r2, [r2, #20]
 80057e8:	fb03 f202 	mul.w	r2, r3, r2
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	61da      	str	r2, [r3, #28]
 80057f0:	e036      	b.n	8005860 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6a1a      	ldr	r2, [r3, #32]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	61da      	str	r2, [r3, #28]
 80057fa:	e031      	b.n	8005860 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d018      	beq.n	8005836 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	8a92      	ldrh	r2, [r2, #20]
 800580c:	4413      	add	r3, r2
 800580e:	3b01      	subs	r3, #1
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	8a92      	ldrh	r2, [r2, #20]
 8005814:	fbb3 f3f2 	udiv	r3, r3, r2
 8005818:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800581a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800581c:	8b7b      	ldrh	r3, [r7, #26]
 800581e:	429a      	cmp	r2, r3
 8005820:	d90b      	bls.n	800583a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005822:	8b7b      	ldrh	r3, [r7, #26]
 8005824:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005826:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	8a92      	ldrh	r2, [r2, #20]
 800582c:	fb03 f202 	mul.w	r2, r3, r2
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	61da      	str	r2, [r3, #28]
 8005834:	e001      	b.n	800583a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005836:	2301      	movs	r3, #1
 8005838:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	78db      	ldrb	r3, [r3, #3]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005842:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	8a92      	ldrh	r2, [r2, #20]
 8005848:	fb03 f202 	mul.w	r2, r3, r2
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	61da      	str	r2, [r3, #28]
 8005850:	e006      	b.n	8005860 <USB_HC_StartXfer+0x1a4>
 8005852:	bf00      	nop
 8005854:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005868:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800586a:	04d9      	lsls	r1, r3, #19
 800586c:	4ba3      	ldr	r3, [pc, #652]	@ (8005afc <USB_HC_StartXfer+0x440>)
 800586e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005870:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	7d9b      	ldrb	r3, [r3, #22]
 8005876:	075b      	lsls	r3, r3, #29
 8005878:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800587c:	69f9      	ldr	r1, [r7, #28]
 800587e:	0148      	lsls	r0, r1, #5
 8005880:	6a39      	ldr	r1, [r7, #32]
 8005882:	4401      	add	r1, r0
 8005884:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005888:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800588a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6999      	ldr	r1, [r3, #24]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	4413      	add	r3, r2
 800589e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a2:	460a      	mov	r2, r1
 80058a4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bf0c      	ite	eq
 80058b6:	2301      	moveq	r3, #1
 80058b8:	2300      	movne	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	6a3a      	ldr	r2, [r7, #32]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80058dc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	7e7b      	ldrb	r3, [r7, #25]
 80058ee:	075b      	lsls	r3, r3, #29
 80058f0:	69f9      	ldr	r1, [r7, #28]
 80058f2:	0148      	lsls	r0, r1, #5
 80058f4:	6a39      	ldr	r1, [r7, #32]
 80058f6:	4401      	add	r1, r0
 80058f8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80058fc:	4313      	orrs	r3, r2
 80058fe:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	799b      	ldrb	r3, [r3, #6]
 8005904:	2b01      	cmp	r3, #1
 8005906:	f040 80c3 	bne.w	8005a90 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	7c5b      	ldrb	r3, [r3, #17]
 800590e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005914:	4313      	orrs	r3, r2
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	6a3a      	ldr	r2, [r7, #32]
 800591c:	440a      	add	r2, r1
 800591e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005922:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005926:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	4413      	add	r3, r2
 8005930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	6a3a      	ldr	r2, [r7, #32]
 800593c:	440a      	add	r2, r1
 800593e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005942:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005946:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	79db      	ldrb	r3, [r3, #7]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d123      	bne.n	8005998 <USB_HC_StartXfer+0x2dc>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	78db      	ldrb	r3, [r3, #3]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d11f      	bne.n	8005998 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	4413      	add	r3, r2
 8005960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	440a      	add	r2, r1
 800596e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005976:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	440a      	add	r2, r1
 800598e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005996:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	7c9b      	ldrb	r3, [r3, #18]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d003      	beq.n	80059a8 <USB_HC_StartXfer+0x2ec>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	7c9b      	ldrb	r3, [r3, #18]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d117      	bne.n	80059d8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d113      	bne.n	80059d8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	78db      	ldrb	r3, [r3, #3]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d10f      	bne.n	80059d8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	6a3a      	ldr	r2, [r7, #32]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	7c9b      	ldrb	r3, [r3, #18]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d162      	bne.n	8005aa6 <USB_HC_StartXfer+0x3ea>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	78db      	ldrb	r3, [r3, #3]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d15e      	bne.n	8005aa6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d858      	bhi.n	8005aa4 <USB_HC_StartXfer+0x3e8>
 80059f2:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <USB_HC_StartXfer+0x33c>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a09 	.word	0x08005a09
 80059fc:	08005a2b 	.word	0x08005a2b
 8005a00:	08005a4d 	.word	0x08005a4d
 8005a04:	08005a6f 	.word	0x08005a6f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	0151      	lsls	r1, r2, #5
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a26:	6053      	str	r3, [r2, #4]
          break;
 8005a28:	e03d      	b.n	8005aa6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	0151      	lsls	r1, r2, #5
 8005a3c:	6a3a      	ldr	r2, [r7, #32]
 8005a3e:	440a      	add	r2, r1
 8005a40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a44:	f043 030e 	orr.w	r3, r3, #14
 8005a48:	6053      	str	r3, [r2, #4]
          break;
 8005a4a:	e02c      	b.n	8005aa6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	6a3a      	ldr	r2, [r7, #32]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a6a:	6053      	str	r3, [r2, #4]
          break;
 8005a6c:	e01b      	b.n	8005aa6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	6a3a      	ldr	r2, [r7, #32]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a8c:	6053      	str	r3, [r2, #4]
          break;
 8005a8e:	e00a      	b.n	8005aa6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6053      	str	r3, [r2, #4]
 8005aa2:	e000      	b.n	8005aa6 <USB_HC_StartXfer+0x3ea>
          break;
 8005aa4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005abc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	78db      	ldrb	r3, [r3, #3]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d004      	beq.n	8005ad0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	e003      	b.n	8005ad8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ad6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ade:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aec:	461a      	mov	r2, r3
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e055      	b.n	8005ba8 <USB_HC_StartXfer+0x4ec>
 8005afc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	78db      	ldrb	r3, [r3, #3]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d14e      	bne.n	8005ba6 <USB_HC_StartXfer+0x4ea>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d04a      	beq.n	8005ba6 <USB_HC_StartXfer+0x4ea>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	79db      	ldrb	r3, [r3, #7]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d146      	bne.n	8005ba6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	7c9b      	ldrb	r3, [r3, #18]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d831      	bhi.n	8005b84 <USB_HC_StartXfer+0x4c8>
 8005b20:	a201      	add	r2, pc, #4	@ (adr r2, 8005b28 <USB_HC_StartXfer+0x46c>)
 8005b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b26:	bf00      	nop
 8005b28:	08005b39 	.word	0x08005b39
 8005b2c:	08005b5d 	.word	0x08005b5d
 8005b30:	08005b39 	.word	0x08005b39
 8005b34:	08005b5d 	.word	0x08005b5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	3303      	adds	r3, #3
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b42:	8afa      	ldrh	r2, [r7, #22]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d91c      	bls.n	8005b88 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f043 0220 	orr.w	r2, r3, #32
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b5a:	e015      	b.n	8005b88 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	3303      	adds	r3, #3
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b66:	8afa      	ldrh	r2, [r7, #22]
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d90a      	bls.n	8005b8c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b82:	e003      	b.n	8005b8c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005b84:	bf00      	nop
 8005b86:	e002      	b.n	8005b8e <USB_HC_StartXfer+0x4d2>
        break;
 8005b88:	bf00      	nop
 8005b8a:	e000      	b.n	8005b8e <USB_HC_StartXfer+0x4d2>
        break;
 8005b8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6999      	ldr	r1, [r3, #24]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	785a      	ldrb	r2, [r3, #1]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	9000      	str	r0, [sp, #0]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff f9c3 	bl	8004f2c <USB_WritePacket>
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3728      	adds	r7, #40	@ 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	b29b      	uxth	r3, r3
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b089      	sub	sp, #36	@ 0x24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	0c9b      	lsrs	r3, r3, #18
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	0fdb      	lsrs	r3, r3, #31
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	0fdb      	lsrs	r3, r3, #31
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d10d      	bne.n	8005c54 <USB_HC_Halt+0x82>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <USB_HC_Halt+0x82>
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d002      	beq.n	8005c50 <USB_HC_Halt+0x7e>
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d101      	bne.n	8005c54 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e0d8      	b.n	8005e06 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <USB_HC_Halt+0x8e>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d173      	bne.n	8005d48 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	0151      	lsls	r1, r2, #5
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	440a      	add	r2, r1
 8005c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c7e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d14a      	bne.n	8005d22 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d133      	bne.n	8005d00 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005cb6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cd6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ce4:	d82e      	bhi.n	8005d44 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cfc:	d0ec      	beq.n	8005cd8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cfe:	e081      	b.n	8005e04 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d1e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d20:	e070      	b.n	8005e04 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d42:	e05f      	b.n	8005e04 <USB_HC_Halt+0x232>
            break;
 8005d44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d46:	e05d      	b.n	8005e04 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d133      	bne.n	8005de0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005db2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005db6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dc4:	d81d      	bhi.n	8005e02 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ddc:	d0ec      	beq.n	8005db8 <USB_HC_Halt+0x1e6>
 8005dde:	e011      	b.n	8005e04 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	0151      	lsls	r1, r2, #5
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	440a      	add	r2, r1
 8005df6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dfa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	e000      	b.n	8005e04 <USB_HC_Halt+0x232>
          break;
 8005e02:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3724      	adds	r7, #36	@ 0x24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
	...

08005e14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	04da      	lsls	r2, r3, #19
 8005e30:	4b15      	ldr	r3, [pc, #84]	@ (8005e88 <USB_DoPing+0x74>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e72:	461a      	mov	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	1ff80000 	.word	0x1ff80000

08005e8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7fe ff86 	bl	8004db2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ea6:	2110      	movs	r1, #16
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fe ffdf 	bl	8004e6c <USB_FlushTxFifo>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff f809 	bl	8004ed0 <USB_FlushRxFifo>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61bb      	str	r3, [r7, #24]
 8005ecc:	e01f      	b.n	8005f0e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ee4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005eec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ef4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f02:	461a      	mov	r2, r3
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	61bb      	str	r3, [r7, #24]
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b0f      	cmp	r3, #15
 8005f12:	d9dc      	bls.n	8005ece <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f14:	2300      	movs	r3, #0
 8005f16:	61bb      	str	r3, [r7, #24]
 8005f18:	e034      	b.n	8005f84 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f30:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f40:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f4e:	461a      	mov	r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3301      	adds	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f60:	d80c      	bhi.n	8005f7c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f78:	d0ec      	beq.n	8005f54 <USB_StopHost+0xc8>
 8005f7a:	e000      	b.n	8005f7e <USB_StopHost+0xf2>
        break;
 8005f7c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	3301      	adds	r3, #1
 8005f82:	61bb      	str	r3, [r7, #24]
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b0f      	cmp	r3, #15
 8005f88:	d9c7      	bls.n	8005f1a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f90:	461a      	mov	r2, r3
 8005f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f96:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f9e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7fe fef5 	bl	8004d90 <USB_EnableGlobalInt>

  return ret;
 8005fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005fb0:	b590      	push	{r4, r7, lr}
 8005fb2:	b089      	sub	sp, #36	@ 0x24
 8005fb4:	af04      	add	r7, sp, #16
 8005fb6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005fb8:	2301      	movs	r3, #1
 8005fba:	2202      	movs	r2, #2
 8005fbc:	2102      	movs	r1, #2
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fc83 	bl	80068ca <USBH_FindInterface>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2bff      	cmp	r3, #255	@ 0xff
 8005fcc:	d002      	beq.n	8005fd4 <USBH_CDC_InterfaceInit+0x24>
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d901      	bls.n	8005fd8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e13d      	b.n	8006254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fc58 	bl	8006892 <USBH_SelectInterface>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005fe6:	7bbb      	ldrb	r3, [r7, #14]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005fec:	2302      	movs	r3, #2
 8005fee:	e131      	b.n	8006254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8005ff6:	2050      	movs	r0, #80	@ 0x50
 8005ff8:	f002 fb58 	bl	80086ac <malloc>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006010:	2302      	movs	r3, #2
 8006012:	e11f      	b.n	8006254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006014:	2250      	movs	r2, #80	@ 0x50
 8006016:	2100      	movs	r1, #0
 8006018:	68b8      	ldr	r0, [r7, #8]
 800601a:	f002 fc05 	bl	8008828 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	211a      	movs	r1, #26
 8006024:	fb01 f303 	mul.w	r3, r1, r3
 8006028:	4413      	add	r3, r2
 800602a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	b25b      	sxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	da15      	bge.n	8006062 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	211a      	movs	r1, #26
 800603c:	fb01 f303 	mul.w	r3, r1, r3
 8006040:	4413      	add	r3, r2
 8006042:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006046:	781a      	ldrb	r2, [r3, #0]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	211a      	movs	r1, #26
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	4413      	add	r3, r2
 8006058:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800605c:	881a      	ldrh	r2, [r3, #0]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 ffc4 	bl	8007ff6 <USBH_AllocPipe>
 800606e:	4603      	mov	r3, r0
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	7819      	ldrb	r1, [r3, #0]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	7858      	ldrb	r0, [r3, #1]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	8952      	ldrh	r2, [r2, #10]
 800608e:	9202      	str	r2, [sp, #8]
 8006090:	2203      	movs	r2, #3
 8006092:	9201      	str	r2, [sp, #4]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	4623      	mov	r3, r4
 8006098:	4602      	mov	r2, r0
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 ff7c 	bl	8007f98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2200      	movs	r2, #0
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f002 fa79 	bl	80085a0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80060ae:	2300      	movs	r3, #0
 80060b0:	2200      	movs	r2, #0
 80060b2:	210a      	movs	r1, #10
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fc08 	bl	80068ca <USBH_FindInterface>
 80060ba:	4603      	mov	r3, r0
 80060bc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2bff      	cmp	r3, #255	@ 0xff
 80060c2:	d002      	beq.n	80060ca <USBH_CDC_InterfaceInit+0x11a>
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d901      	bls.n	80060ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060ca:	2302      	movs	r3, #2
 80060cc:	e0c2      	b.n	8006254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	211a      	movs	r1, #26
 80060d4:	fb01 f303 	mul.w	r3, r1, r3
 80060d8:	4413      	add	r3, r2
 80060da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	b25b      	sxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	da16      	bge.n	8006114 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	211a      	movs	r1, #26
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	4413      	add	r3, r2
 80060f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80060f6:	781a      	ldrb	r2, [r3, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	211a      	movs	r1, #26
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	4413      	add	r3, r2
 8006108:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800610c:	881a      	ldrh	r2, [r3, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	835a      	strh	r2, [r3, #26]
 8006112:	e015      	b.n	8006140 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	211a      	movs	r1, #26
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	4413      	add	r3, r2
 8006120:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	211a      	movs	r1, #26
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	4413      	add	r3, r2
 8006136:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800613a:	881a      	ldrh	r2, [r3, #0]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	211a      	movs	r1, #26
 8006146:	fb01 f303 	mul.w	r3, r1, r3
 800614a:	4413      	add	r3, r2
 800614c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	b25b      	sxtb	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	da16      	bge.n	8006186 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	211a      	movs	r1, #26
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	4413      	add	r3, r2
 8006164:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	211a      	movs	r1, #26
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	4413      	add	r3, r2
 800617a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800617e:	881a      	ldrh	r2, [r3, #0]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	835a      	strh	r2, [r3, #26]
 8006184:	e015      	b.n	80061b2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	211a      	movs	r1, #26
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	4413      	add	r3, r2
 8006192:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006196:	781a      	ldrb	r2, [r3, #0]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	211a      	movs	r1, #26
 80061a2:	fb01 f303 	mul.w	r3, r1, r3
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80061ac:	881a      	ldrh	r2, [r3, #0]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	7b9b      	ldrb	r3, [r3, #14]
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 ff1c 	bl	8007ff6 <USBH_AllocPipe>
 80061be:	4603      	mov	r3, r0
 80061c0:	461a      	mov	r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	7bdb      	ldrb	r3, [r3, #15]
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 ff12 	bl	8007ff6 <USBH_AllocPipe>
 80061d2:	4603      	mov	r3, r0
 80061d4:	461a      	mov	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	7b59      	ldrb	r1, [r3, #13]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	7b98      	ldrb	r0, [r3, #14]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	8b12      	ldrh	r2, [r2, #24]
 80061f2:	9202      	str	r2, [sp, #8]
 80061f4:	2202      	movs	r2, #2
 80061f6:	9201      	str	r2, [sp, #4]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	4623      	mov	r3, r4
 80061fc:	4602      	mov	r2, r0
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 feca 	bl	8007f98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	7b19      	ldrb	r1, [r3, #12]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	7bd8      	ldrb	r0, [r3, #15]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	8b52      	ldrh	r2, [r2, #26]
 800621c:	9202      	str	r2, [sp, #8]
 800621e:	2202      	movs	r2, #2
 8006220:	9201      	str	r2, [sp, #4]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	4623      	mov	r3, r4
 8006226:	4602      	mov	r2, r0
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 feb5 	bl	8007f98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	7b5b      	ldrb	r3, [r3, #13]
 800623a:	2200      	movs	r2, #0
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f002 f9ae 	bl	80085a0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	7b1b      	ldrb	r3, [r3, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f002 f9a7 	bl	80085a0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	bd90      	pop	{r4, r7, pc}

0800625c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00e      	beq.n	8006294 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 feaa 	bl	8007fd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 fed5 	bl	8008038 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	7b1b      	ldrb	r3, [r3, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00e      	beq.n	80062ba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	7b1b      	ldrb	r3, [r3, #12]
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 fe97 	bl	8007fd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	7b1b      	ldrb	r3, [r3, #12]
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f001 fec2 	bl	8008038 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	7b5b      	ldrb	r3, [r3, #13]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00e      	beq.n	80062e0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	7b5b      	ldrb	r3, [r3, #13]
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fe84 	bl	8007fd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	7b5b      	ldrb	r3, [r3, #13]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 feaf 	bl	8008038 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f002 f9e1 	bl	80086bc <free>
    phost->pActiveClass->pData = 0U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006300:	2200      	movs	r2, #0
 8006302:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3340      	adds	r3, #64	@ 0x40
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f8b1 	bl	800648e <GetLineCoding>
 800632c:	4603      	mov	r3, r0
 800632e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006330:	7afb      	ldrb	r3, [r7, #11]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d105      	bne.n	8006342 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800633c:	2102      	movs	r1, #2
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006342:	7afb      	ldrb	r3, [r7, #11]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800636c:	2b04      	cmp	r3, #4
 800636e:	d877      	bhi.n	8006460 <USBH_CDC_Process+0x114>
 8006370:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <USBH_CDC_Process+0x2c>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	0800638d 	.word	0x0800638d
 800637c:	08006393 	.word	0x08006393
 8006380:	080063c3 	.word	0x080063c3
 8006384:	08006437 	.word	0x08006437
 8006388:	08006445 	.word	0x08006445
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	73fb      	strb	r3, [r7, #15]
      break;
 8006390:	e06d      	b.n	800646e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f897 	bl	80064cc <SetLineCoding>
 800639e:	4603      	mov	r3, r0
 80063a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063b0:	e058      	b.n	8006464 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d055      	beq.n	8006464 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2204      	movs	r2, #4
 80063bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80063c0:	e050      	b.n	8006464 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	3340      	adds	r3, #64	@ 0x40
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f860 	bl	800648e <GetLineCoding>
 80063ce:	4603      	mov	r3, r0
 80063d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d126      	bne.n	8006426 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ea:	791b      	ldrb	r3, [r3, #4]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d13b      	bne.n	8006468 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d133      	bne.n	8006468 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800640a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800640c:	429a      	cmp	r2, r3
 800640e:	d12b      	bne.n	8006468 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006418:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800641a:	429a      	cmp	r2, r3
 800641c:	d124      	bne.n	8006468 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f958 	bl	80066d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006424:	e020      	b.n	8006468 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d01d      	beq.n	8006468 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2204      	movs	r2, #4
 8006430:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006434:	e018      	b.n	8006468 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f867 	bl	800650a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f8da 	bl	80065f6 <CDC_ProcessReception>
      break;
 8006442:	e014      	b.n	800646e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006444:	2100      	movs	r1, #0
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 f81e 	bl	8007488 <USBH_ClrFeature>
 800644c:	4603      	mov	r3, r0
 800644e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800645e:	e005      	b.n	800646c <USBH_CDC_Process+0x120>

    default:
      break;
 8006460:	bf00      	nop
 8006462:	e004      	b.n	800646e <USBH_CDC_Process+0x122>
      break;
 8006464:	bf00      	nop
 8006466:	e002      	b.n	800646e <USBH_CDC_Process+0x122>
      break;
 8006468:	bf00      	nop
 800646a:	e000      	b.n	800646e <USBH_CDC_Process+0x122>
      break;
 800646c:	bf00      	nop

  }

  return status;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	22a1      	movs	r2, #161	@ 0xa1
 800649c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2221      	movs	r2, #33	@ 0x21
 80064a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2207      	movs	r2, #7
 80064b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2207      	movs	r2, #7
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fb17 	bl	8007af0 <USBH_CtlReq>
 80064c2:	4603      	mov	r3, r0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2221      	movs	r2, #33	@ 0x21
 80064da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2207      	movs	r2, #7
 80064f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2207      	movs	r2, #7
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 faf8 	bl	8007af0 <USBH_CtlReq>
 8006500:	4603      	mov	r3, r0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b086      	sub	sp, #24
 800650e:	af02      	add	r7, sp, #8
 8006510:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800651c:	2300      	movs	r3, #0
 800651e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006526:	2b01      	cmp	r3, #1
 8006528:	d002      	beq.n	8006530 <CDC_ProcessTransmission+0x26>
 800652a:	2b02      	cmp	r3, #2
 800652c:	d023      	beq.n	8006576 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800652e:	e05e      	b.n	80065ee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	8b12      	ldrh	r2, [r2, #24]
 8006538:	4293      	cmp	r3, r2
 800653a:	d90b      	bls.n	8006554 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	69d9      	ldr	r1, [r3, #28]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8b1a      	ldrh	r2, [r3, #24]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	7b5b      	ldrb	r3, [r3, #13]
 8006548:	2001      	movs	r0, #1
 800654a:	9000      	str	r0, [sp, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 fce0 	bl	8007f12 <USBH_BulkSendData>
 8006552:	e00b      	b.n	800656c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	7b5b      	ldrb	r3, [r3, #13]
 8006562:	2001      	movs	r0, #1
 8006564:	9000      	str	r0, [sp, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fcd3 	bl	8007f12 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006574:	e03b      	b.n	80065ee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	7b5b      	ldrb	r3, [r3, #13]
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 ffe5 	bl	800854c <USBH_LL_GetURBState>
 8006582:	4603      	mov	r3, r0
 8006584:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006586:	7afb      	ldrb	r3, [r7, #11]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d128      	bne.n	80065de <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	8b12      	ldrh	r2, [r2, #24]
 8006594:	4293      	cmp	r3, r2
 8006596:	d90e      	bls.n	80065b6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	8b12      	ldrh	r2, [r2, #24]
 80065a0:	1a9a      	subs	r2, r3, r2
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	8b12      	ldrh	r2, [r2, #24]
 80065ae:	441a      	add	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	61da      	str	r2, [r3, #28]
 80065b4:	e002      	b.n	80065bc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d004      	beq.n	80065ce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80065cc:	e00e      	b.n	80065ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f868 	bl	80066ac <USBH_CDC_TransmitCallback>
      break;
 80065dc:	e006      	b.n	80065ec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80065de:	7afb      	ldrb	r3, [r7, #11]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d103      	bne.n	80065ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80065ec:	bf00      	nop
  }
}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b086      	sub	sp, #24
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006608:	2300      	movs	r3, #0
 800660a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006612:	2b03      	cmp	r3, #3
 8006614:	d002      	beq.n	800661c <CDC_ProcessReception+0x26>
 8006616:	2b04      	cmp	r3, #4
 8006618:	d00e      	beq.n	8006638 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800661a:	e043      	b.n	80066a4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	6a19      	ldr	r1, [r3, #32]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	8b5a      	ldrh	r2, [r3, #26]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	7b1b      	ldrb	r3, [r3, #12]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 fc97 	bl	8007f5c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2204      	movs	r2, #4
 8006632:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006636:	e035      	b.n	80066a4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	7b1b      	ldrb	r3, [r3, #12]
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f001 ff84 	bl	800854c <USBH_LL_GetURBState>
 8006644:	4603      	mov	r3, r0
 8006646:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006648:	7cfb      	ldrb	r3, [r7, #19]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d129      	bne.n	80066a2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	7b1b      	ldrb	r3, [r3, #12]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fef9 	bl	800844c <USBH_LL_GetLastXferSize>
 800665a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	429a      	cmp	r2, r3
 8006664:	d016      	beq.n	8006694 <CDC_ProcessReception+0x9e>
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	8b5b      	ldrh	r3, [r3, #26]
 800666a:	461a      	mov	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4293      	cmp	r3, r2
 8006670:	d110      	bne.n	8006694 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1ad2      	subs	r2, r2, r3
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	6a1a      	ldr	r2, [r3, #32]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	441a      	add	r2, r3
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2203      	movs	r2, #3
 800668e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006692:	e006      	b.n	80066a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f80f 	bl	80066c0 <USBH_CDC_ReceiveCallback>
      break;
 80066a2:	bf00      	nop
  }
}
 80066a4:	bf00      	nop
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80066fc:	2302      	movs	r3, #2
 80066fe:	e029      	b.n	8006754 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	79fa      	ldrb	r2, [r7, #7]
 8006704:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 f81f 	bl	800675c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f001 fdc9 	bl	80082e4 <USBH_LL_Init>

  return USBH_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e009      	b.n	800677e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	33e0      	adds	r3, #224	@ 0xe0
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	2200      	movs	r2, #0
 8006776:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b0f      	cmp	r3, #15
 8006782:	d9f2      	bls.n	800676a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	e009      	b.n	800679e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3301      	adds	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a4:	d3f1      	bcc.n	800678a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2240      	movs	r2, #64	@ 0x40
 80067ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	331c      	adds	r3, #28
 80067f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067fa:	2100      	movs	r1, #0
 80067fc:	4618      	mov	r0, r3
 80067fe:	f002 f813 	bl	8008828 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f002 f80a 	bl	8008828 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800681a:	2212      	movs	r2, #18
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f002 f802 	bl	8008828 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800682a:	223e      	movs	r2, #62	@ 0x3e
 800682c:	2100      	movs	r1, #0
 800682e:	4618      	mov	r0, r3
 8006830:	f001 fffa 	bl	8008828 <memset>

  return USBH_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d016      	beq.n	8006880 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10e      	bne.n	800687a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006862:	1c59      	adds	r1, r3, #1
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	33de      	adds	r3, #222	@ 0xde
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	73fb      	strb	r3, [r7, #15]
 8006878:	e004      	b.n	8006884 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800687a:	2302      	movs	r3, #2
 800687c:	73fb      	strb	r3, [r7, #15]
 800687e:	e001      	b.n	8006884 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006880:	2302      	movs	r3, #2
 8006882:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006892:	b480      	push	{r7}
 8006894:	b085      	sub	sp, #20
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	460b      	mov	r3, r1
 800689c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80068a8:	78fa      	ldrb	r2, [r7, #3]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d204      	bcs.n	80068b8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	78fa      	ldrb	r2, [r7, #3]
 80068b2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80068b6:	e001      	b.n	80068bc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80068b8:	2302      	movs	r3, #2
 80068ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b087      	sub	sp, #28
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	4608      	mov	r0, r1
 80068d4:	4611      	mov	r1, r2
 80068d6:	461a      	mov	r2, r3
 80068d8:	4603      	mov	r3, r0
 80068da:	70fb      	strb	r3, [r7, #3]
 80068dc:	460b      	mov	r3, r1
 80068de:	70bb      	strb	r3, [r7, #2]
 80068e0:	4613      	mov	r3, r2
 80068e2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80068e8:	2300      	movs	r3, #0
 80068ea:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80068f2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80068f4:	e025      	b.n	8006942 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	221a      	movs	r2, #26
 80068fa:	fb02 f303 	mul.w	r3, r2, r3
 80068fe:	3308      	adds	r3, #8
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	3302      	adds	r3, #2
 8006906:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	795b      	ldrb	r3, [r3, #5]
 800690c:	78fa      	ldrb	r2, [r7, #3]
 800690e:	429a      	cmp	r2, r3
 8006910:	d002      	beq.n	8006918 <USBH_FindInterface+0x4e>
 8006912:	78fb      	ldrb	r3, [r7, #3]
 8006914:	2bff      	cmp	r3, #255	@ 0xff
 8006916:	d111      	bne.n	800693c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800691c:	78ba      	ldrb	r2, [r7, #2]
 800691e:	429a      	cmp	r2, r3
 8006920:	d002      	beq.n	8006928 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006922:	78bb      	ldrb	r3, [r7, #2]
 8006924:	2bff      	cmp	r3, #255	@ 0xff
 8006926:	d109      	bne.n	800693c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800692c:	787a      	ldrb	r2, [r7, #1]
 800692e:	429a      	cmp	r2, r3
 8006930:	d002      	beq.n	8006938 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006932:	787b      	ldrb	r3, [r7, #1]
 8006934:	2bff      	cmp	r3, #255	@ 0xff
 8006936:	d101      	bne.n	800693c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	e006      	b.n	800694a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	3301      	adds	r3, #1
 8006940:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006942:	7dfb      	ldrb	r3, [r7, #23]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d9d6      	bls.n	80068f6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006948:	23ff      	movs	r3, #255	@ 0xff
}
 800694a:	4618      	mov	r0, r3
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fcfc 	bl	800835c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006964:	2101      	movs	r1, #1
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 fe03 	bl	8008572 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af04      	add	r7, sp, #16
 800697e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006980:	2302      	movs	r3, #2
 8006982:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	d102      	bne.n	800699a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2203      	movs	r2, #3
 8006998:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b0b      	cmp	r3, #11
 80069a2:	f200 81bc 	bhi.w	8006d1e <USBH_Process+0x3a6>
 80069a6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ac <USBH_Process+0x34>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069dd 	.word	0x080069dd
 80069b0:	08006a0f 	.word	0x08006a0f
 80069b4:	08006a79 	.word	0x08006a79
 80069b8:	08006cb9 	.word	0x08006cb9
 80069bc:	08006d1f 	.word	0x08006d1f
 80069c0:	08006b19 	.word	0x08006b19
 80069c4:	08006c5f 	.word	0x08006c5f
 80069c8:	08006b4f 	.word	0x08006b4f
 80069cc:	08006b6f 	.word	0x08006b6f
 80069d0:	08006b8d 	.word	0x08006b8d
 80069d4:	08006bd1 	.word	0x08006bd1
 80069d8:	08006ca1 	.word	0x08006ca1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 819c 	beq.w	8006d22 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80069f0:	20c8      	movs	r0, #200	@ 0xc8
 80069f2:	f001 fe08 	bl	8008606 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 fd0d 	bl	8008416 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8006a0c:	e189      	b.n	8006d22 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d107      	bne.n	8006a2a <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006a28:	e18a      	b.n	8006d40 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a34:	d914      	bls.n	8006a60 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d903      	bls.n	8006a58 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	220d      	movs	r2, #13
 8006a54:	701a      	strb	r2, [r3, #0]
      break;
 8006a56:	e173      	b.n	8006d40 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
      break;
 8006a5e:	e16f      	b.n	8006d40 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006a66:	f103 020a 	add.w	r2, r3, #10
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006a70:	200a      	movs	r0, #10
 8006a72:	f001 fdc8 	bl	8008606 <USBH_Delay>
      break;
 8006a76:	e163      	b.n	8006d40 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d005      	beq.n	8006a8e <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006a88:	2104      	movs	r1, #4
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006a8e:	2064      	movs	r0, #100	@ 0x64
 8006a90:	f001 fdb9 	bl	8008606 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 fc97 	bl	80083c8 <USBH_LL_GetSpeed>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2205      	movs	r2, #5
 8006aa8:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006aaa:	2100      	movs	r1, #0
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 faa2 	bl	8007ff6 <USBH_AllocPipe>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006aba:	2180      	movs	r1, #128	@ 0x80
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fa9a 	bl	8007ff6 <USBH_AllocPipe>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	7919      	ldrb	r1, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ade:	9202      	str	r2, [sp, #8]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	9201      	str	r2, [sp, #4]
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2280      	movs	r2, #128	@ 0x80
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fa54 	bl	8007f98 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7959      	ldrb	r1, [r3, #5]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b04:	9202      	str	r2, [sp, #8]
 8006b06:	2200      	movs	r2, #0
 8006b08:	9201      	str	r2, [sp, #4]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2200      	movs	r2, #0
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 fa41 	bl	8007f98 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006b16:	e113      	b.n	8006d40 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f917 	bl	8006d4c <USBH_HandleEnum>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f040 80fd 	bne.w	8006d26 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d103      	bne.n	8006b46 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2208      	movs	r2, #8
 8006b42:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8006b44:	e0ef      	b.n	8006d26 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2207      	movs	r2, #7
 8006b4a:	701a      	strb	r2, [r3, #0]
      break;
 8006b4c:	e0eb      	b.n	8006d26 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80e8 	beq.w	8006d2a <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006b60:	2101      	movs	r1, #1
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2208      	movs	r2, #8
 8006b6a:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8006b6c:	e0dd      	b.n	8006d2a <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fc3f 	bl	80073fa <USBH_SetCfg>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f040 80d5 	bne.w	8006d2e <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2209      	movs	r2, #9
 8006b88:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006b8a:	e0d0      	b.n	8006d2e <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d016      	beq.n	8006bc8 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fc4f 	bl	8007440 <USBH_SetFeature>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d103      	bne.n	8006bb6 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	220a      	movs	r2, #10
 8006bb2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006bb4:	e0bd      	b.n	8006d32 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	f040 80b9 	bne.w	8006d32 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	220a      	movs	r2, #10
 8006bc4:	701a      	strb	r2, [r3, #0]
      break;
 8006bc6:	e0b4      	b.n	8006d32 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	220a      	movs	r2, #10
 8006bcc:	701a      	strb	r2, [r3, #0]
      break;
 8006bce:	e0b0      	b.n	8006d32 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80ad 	beq.w	8006d36 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006be4:	2300      	movs	r3, #0
 8006be6:	73fb      	strb	r3, [r7, #15]
 8006be8:	e016      	b.n	8006c18 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006bea:	7bfa      	ldrb	r2, [r7, #15]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	32de      	adds	r2, #222	@ 0xde
 8006bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf4:	791a      	ldrb	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d108      	bne.n	8006c12 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006c00:	7bfa      	ldrb	r2, [r7, #15]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	32de      	adds	r2, #222	@ 0xde
 8006c06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006c10:	e005      	b.n	8006c1e <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	3301      	adds	r3, #1
 8006c16:	73fb      	strb	r3, [r7, #15]
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0e5      	beq.n	8006bea <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d016      	beq.n	8006c56 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	4798      	blx	r3
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2206      	movs	r2, #6
 8006c3e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c46:	2103      	movs	r1, #3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006c4c:	e073      	b.n	8006d36 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	220d      	movs	r2, #13
 8006c52:	701a      	strb	r2, [r3, #0]
      break;
 8006c54:	e06f      	b.n	8006d36 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	220d      	movs	r2, #13
 8006c5a:	701a      	strb	r2, [r3, #0]
      break;
 8006c5c:	e06b      	b.n	8006d36 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d017      	beq.n	8006c98 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	4798      	blx	r3
 8006c74:	4603      	mov	r3, r0
 8006c76:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d103      	bne.n	8006c88 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	220b      	movs	r2, #11
 8006c84:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006c86:	e058      	b.n	8006d3a <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d154      	bne.n	8006d3a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	220d      	movs	r2, #13
 8006c94:	701a      	strb	r2, [r3, #0]
      break;
 8006c96:	e050      	b.n	8006d3a <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	220d      	movs	r2, #13
 8006c9c:	701a      	strb	r2, [r3, #0]
      break;
 8006c9e:	e04c      	b.n	8006d3a <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d049      	beq.n	8006d3e <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3
      }
      break;
 8006cb6:	e042      	b.n	8006d3e <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fd4b 	bl	800675c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d009      	beq.n	8006ce4 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006cf4:	2105      	movs	r1, #5
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d107      	bne.n	8006d16 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fe21 	bl	8006956 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006d14:	e014      	b.n	8006d40 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 fb20 	bl	800835c <USBH_LL_Start>
      break;
 8006d1c:	e010      	b.n	8006d40 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006d1e:	bf00      	nop
 8006d20:	e00e      	b.n	8006d40 <USBH_Process+0x3c8>
      break;
 8006d22:	bf00      	nop
 8006d24:	e00c      	b.n	8006d40 <USBH_Process+0x3c8>
      break;
 8006d26:	bf00      	nop
 8006d28:	e00a      	b.n	8006d40 <USBH_Process+0x3c8>
    break;
 8006d2a:	bf00      	nop
 8006d2c:	e008      	b.n	8006d40 <USBH_Process+0x3c8>
      break;
 8006d2e:	bf00      	nop
 8006d30:	e006      	b.n	8006d40 <USBH_Process+0x3c8>
      break;
 8006d32:	bf00      	nop
 8006d34:	e004      	b.n	8006d40 <USBH_Process+0x3c8>
      break;
 8006d36:	bf00      	nop
 8006d38:	e002      	b.n	8006d40 <USBH_Process+0x3c8>
      break;
 8006d3a:	bf00      	nop
 8006d3c:	e000      	b.n	8006d40 <USBH_Process+0x3c8>
      break;
 8006d3e:	bf00      	nop
  }
  return USBH_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop

08006d4c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af04      	add	r7, sp, #16
 8006d52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	2b07      	cmp	r3, #7
 8006d62:	f200 81bd 	bhi.w	80070e0 <USBH_HandleEnum+0x394>
 8006d66:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <USBH_HandleEnum+0x20>)
 8006d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6c:	08006d8d 	.word	0x08006d8d
 8006d70:	08006e47 	.word	0x08006e47
 8006d74:	08006eb1 	.word	0x08006eb1
 8006d78:	08006f3b 	.word	0x08006f3b
 8006d7c:	08006fa5 	.word	0x08006fa5
 8006d80:	08007015 	.word	0x08007015
 8006d84:	0800705b 	.word	0x0800705b
 8006d88:	080070a1 	.word	0x080070a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006d8c:	2108      	movs	r1, #8
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa50 	bl	8007234 <USBH_Get_DevDesc>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d12e      	bne.n	8006dfc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	7919      	ldrb	r1, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006dc2:	9202      	str	r2, [sp, #8]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	9201      	str	r2, [sp, #4]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2280      	movs	r2, #128	@ 0x80
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 f8e2 	bl	8007f98 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	7959      	ldrb	r1, [r3, #5]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006de8:	9202      	str	r2, [sp, #8]
 8006dea:	2200      	movs	r2, #0
 8006dec:	9201      	str	r2, [sp, #4]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	4603      	mov	r3, r0
 8006df2:	2200      	movs	r2, #0
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f8cf 	bl	8007f98 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006dfa:	e173      	b.n	80070e4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	f040 8170 	bne.w	80070e4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d903      	bls.n	8006e26 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	220d      	movs	r2, #13
 8006e22:	701a      	strb	r2, [r3, #0]
      break;
 8006e24:	e15e      	b.n	80070e4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	795b      	ldrb	r3, [r3, #5]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 f903 	bl	8008038 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	791b      	ldrb	r3, [r3, #4]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f8fd 	bl	8008038 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
      break;
 8006e44:	e14e      	b.n	80070e4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006e46:	2112      	movs	r1, #18
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f9f3 	bl	8007234 <USBH_Get_DevDesc>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e5e:	e143      	b.n	80070e8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	f040 8140 	bne.w	80070e8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006e6e:	3301      	adds	r3, #1
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d903      	bls.n	8006e8a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	220d      	movs	r2, #13
 8006e86:	701a      	strb	r2, [r3, #0]
      break;
 8006e88:	e12e      	b.n	80070e8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	795b      	ldrb	r3, [r3, #5]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 f8d1 	bl	8008038 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	791b      	ldrb	r3, [r3, #4]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 f8cb 	bl	8008038 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	701a      	strb	r2, [r3, #0]
      break;
 8006eae:	e11b      	b.n	80070e8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa7d 	bl	80073b2 <USBH_SetAddress>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d130      	bne.n	8006f24 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006ec2:	2002      	movs	r0, #2
 8006ec4:	f001 fb9f 	bl	8008606 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2203      	movs	r2, #3
 8006ed4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	7919      	ldrb	r1, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006eea:	9202      	str	r2, [sp, #8]
 8006eec:	2200      	movs	r2, #0
 8006eee:	9201      	str	r2, [sp, #4]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2280      	movs	r2, #128	@ 0x80
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 f84e 	bl	8007f98 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	7959      	ldrb	r1, [r3, #5]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f10:	9202      	str	r2, [sp, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	9201      	str	r2, [sp, #4]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 f83b 	bl	8007f98 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f22:	e0e3      	b.n	80070ec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	f040 80e0 	bne.w	80070ec <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	220d      	movs	r2, #13
 8006f30:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	705a      	strb	r2, [r3, #1]
      break;
 8006f38:	e0d8      	b.n	80070ec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006f3a:	2109      	movs	r1, #9
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f9a5 	bl	800728c <USBH_Get_CfgDesc>
 8006f42:	4603      	mov	r3, r0
 8006f44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d103      	bne.n	8006f54 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f52:	e0cd      	b.n	80070f0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	f040 80ca 	bne.w	80070f0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006f62:	3301      	adds	r3, #1
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d903      	bls.n	8006f7e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	220d      	movs	r2, #13
 8006f7a:	701a      	strb	r2, [r3, #0]
      break;
 8006f7c:	e0b8      	b.n	80070f0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	795b      	ldrb	r3, [r3, #5]
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 f857 	bl	8008038 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	791b      	ldrb	r3, [r3, #4]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 f851 	bl	8008038 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	701a      	strb	r2, [r3, #0]
      break;
 8006fa2:	e0a5      	b.n	80070f0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f96d 	bl	800728c <USBH_Get_CfgDesc>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2205      	movs	r2, #5
 8006fc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fc2:	e097      	b.n	80070f4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	f040 8094 	bne.w	80070f4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d903      	bls.n	8006fee <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	220d      	movs	r2, #13
 8006fea:	701a      	strb	r2, [r3, #0]
      break;
 8006fec:	e082      	b.n	80070f4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	795b      	ldrb	r3, [r3, #5]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 f81f 	bl	8008038 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	791b      	ldrb	r3, [r3, #4]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 f819 	bl	8008038 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]
      break;
 8007012:	e06f      	b.n	80070f4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800701a:	2b00      	cmp	r3, #0
 800701c:	d019      	beq.n	8007052 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800702a:	23ff      	movs	r3, #255	@ 0xff
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f957 	bl	80072e0 <USBH_Get_StringDesc>
 8007032:	4603      	mov	r3, r0
 8007034:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2206      	movs	r2, #6
 8007040:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007042:	e059      	b.n	80070f8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d156      	bne.n	80070f8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2206      	movs	r2, #6
 800704e:	705a      	strb	r2, [r3, #1]
      break;
 8007050:	e052      	b.n	80070f8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2206      	movs	r2, #6
 8007056:	705a      	strb	r2, [r3, #1]
      break;
 8007058:	e04e      	b.n	80070f8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007060:	2b00      	cmp	r3, #0
 8007062:	d019      	beq.n	8007098 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007070:	23ff      	movs	r3, #255	@ 0xff
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f934 	bl	80072e0 <USBH_Get_StringDesc>
 8007078:	4603      	mov	r3, r0
 800707a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d103      	bne.n	800708a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2207      	movs	r2, #7
 8007086:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007088:	e038      	b.n	80070fc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	2b03      	cmp	r3, #3
 800708e:	d135      	bne.n	80070fc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2207      	movs	r2, #7
 8007094:	705a      	strb	r2, [r3, #1]
      break;
 8007096:	e031      	b.n	80070fc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2207      	movs	r2, #7
 800709c:	705a      	strb	r2, [r3, #1]
      break;
 800709e:	e02d      	b.n	80070fc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d017      	beq.n	80070da <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80070b6:	23ff      	movs	r3, #255	@ 0xff
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f911 	bl	80072e0 <USBH_Get_StringDesc>
 80070be:	4603      	mov	r3, r0
 80070c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d102      	bne.n	80070ce <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80070cc:	e018      	b.n	8007100 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070ce:	7bbb      	ldrb	r3, [r7, #14]
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d115      	bne.n	8007100 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73fb      	strb	r3, [r7, #15]
      break;
 80070d8:	e012      	b.n	8007100 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
      break;
 80070de:	e00f      	b.n	8007100 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80070e0:	bf00      	nop
 80070e2:	e00e      	b.n	8007102 <USBH_HandleEnum+0x3b6>
      break;
 80070e4:	bf00      	nop
 80070e6:	e00c      	b.n	8007102 <USBH_HandleEnum+0x3b6>
      break;
 80070e8:	bf00      	nop
 80070ea:	e00a      	b.n	8007102 <USBH_HandleEnum+0x3b6>
      break;
 80070ec:	bf00      	nop
 80070ee:	e008      	b.n	8007102 <USBH_HandleEnum+0x3b6>
      break;
 80070f0:	bf00      	nop
 80070f2:	e006      	b.n	8007102 <USBH_HandleEnum+0x3b6>
      break;
 80070f4:	bf00      	nop
 80070f6:	e004      	b.n	8007102 <USBH_HandleEnum+0x3b6>
      break;
 80070f8:	bf00      	nop
 80070fa:	e002      	b.n	8007102 <USBH_HandleEnum+0x3b6>
      break;
 80070fc:	bf00      	nop
 80070fe:	e000      	b.n	8007102 <USBH_HandleEnum+0x3b6>
      break;
 8007100:	bf00      	nop
  }
  return Status;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f804 	bl	800714e <USBH_HandleSof>
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b0b      	cmp	r3, #11
 800715e:	d10a      	bne.n	8007176 <USBH_HandleSof+0x28>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
  }
}
 8007176:	bf00      	nop
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800718e:	bf00      	nop
}
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80071b2:	bf00      	nop
}
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 f8c0 	bl	8008392 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	791b      	ldrb	r3, [r3, #4]
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 ff0d 	bl	8008038 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	795b      	ldrb	r3, [r3, #5]
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 ff07 	bl	8008038 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af02      	add	r7, sp, #8
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007240:	887b      	ldrh	r3, [r7, #2]
 8007242:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007246:	d901      	bls.n	800724c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007248:	2303      	movs	r3, #3
 800724a:	e01b      	b.n	8007284 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007252:	887b      	ldrh	r3, [r7, #2]
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	4613      	mov	r3, r2
 8007258:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800725c:	2100      	movs	r1, #0
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f872 	bl	8007348 <USBH_GetDescriptor>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007274:	887a      	ldrh	r2, [r7, #2]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f929 	bl	80074d0 <USBH_ParseDevDesc>
 800727e:	4603      	mov	r3, r0
 8007280:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af02      	add	r7, sp, #8
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	331c      	adds	r3, #28
 800729c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800729e:	887b      	ldrh	r3, [r7, #2]
 80072a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072a4:	d901      	bls.n	80072aa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e016      	b.n	80072d8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80072aa:	887b      	ldrh	r3, [r7, #2]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072b4:	2100      	movs	r1, #0
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f846 	bl	8007348 <USBH_GetDescriptor>
 80072bc:	4603      	mov	r3, r0
 80072be:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d107      	bne.n	80072d6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80072c6:	887b      	ldrh	r3, [r7, #2]
 80072c8:	461a      	mov	r2, r3
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f9af 	bl	8007630 <USBH_ParseCfgDesc>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	607a      	str	r2, [r7, #4]
 80072ea:	461a      	mov	r2, r3
 80072ec:	460b      	mov	r3, r1
 80072ee:	72fb      	strb	r3, [r7, #11]
 80072f0:	4613      	mov	r3, r2
 80072f2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80072f4:	893b      	ldrh	r3, [r7, #8]
 80072f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072fa:	d802      	bhi.n	8007302 <USBH_Get_StringDesc+0x22>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007302:	2303      	movs	r3, #3
 8007304:	e01c      	b.n	8007340 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007306:	7afb      	ldrb	r3, [r7, #11]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800730e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007316:	893b      	ldrh	r3, [r7, #8]
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	460b      	mov	r3, r1
 800731c:	2100      	movs	r1, #0
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f812 	bl	8007348 <USBH_GetDescriptor>
 8007324:	4603      	mov	r3, r0
 8007326:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d107      	bne.n	800733e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007334:	893a      	ldrh	r2, [r7, #8]
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fb8c 	bl	8007a56 <USBH_ParseStringDesc>
  }

  return status;
 800733e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	72fb      	strb	r3, [r7, #11]
 8007356:	4613      	mov	r3, r2
 8007358:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	789b      	ldrb	r3, [r3, #2]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d11c      	bne.n	800739c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007362:	7afb      	ldrb	r3, [r7, #11]
 8007364:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007368:	b2da      	uxtb	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2206      	movs	r2, #6
 8007372:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	893a      	ldrh	r2, [r7, #8]
 8007378:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800737a:	893b      	ldrh	r3, [r7, #8]
 800737c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007380:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007384:	d104      	bne.n	8007390 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f240 4209 	movw	r2, #1033	@ 0x409
 800738c:	829a      	strh	r2, [r3, #20]
 800738e:	e002      	b.n	8007396 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8b3a      	ldrh	r2, [r7, #24]
 800739a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800739c:	8b3b      	ldrh	r3, [r7, #24]
 800739e:	461a      	mov	r2, r3
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fba4 	bl	8007af0 <USBH_CtlReq>
 80073a8:	4603      	mov	r3, r0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	460b      	mov	r3, r1
 80073bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	789b      	ldrb	r3, [r3, #2]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d10f      	bne.n	80073e6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2205      	movs	r2, #5
 80073d0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80073d2:	78fb      	ldrb	r3, [r7, #3]
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80073e6:	2200      	movs	r2, #0
 80073e8:	2100      	movs	r1, #0
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fb80 	bl	8007af0 <USBH_CtlReq>
 80073f0:	4603      	mov	r3, r0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	789b      	ldrb	r3, [r3, #2]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d10e      	bne.n	800742c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2209      	movs	r2, #9
 8007418:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	887a      	ldrh	r2, [r7, #2]
 800741e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800742c:	2200      	movs	r2, #0
 800742e:	2100      	movs	r1, #0
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fb5d 	bl	8007af0 <USBH_CtlReq>
 8007436:	4603      	mov	r3, r0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	460b      	mov	r3, r1
 800744a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	789b      	ldrb	r3, [r3, #2]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d10f      	bne.n	8007474 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2203      	movs	r2, #3
 800745e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	b29a      	uxth	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007474:	2200      	movs	r2, #0
 8007476:	2100      	movs	r1, #0
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fb39 	bl	8007af0 <USBH_CtlReq>
 800747e:	4603      	mov	r3, r0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	789b      	ldrb	r3, [r3, #2]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d10f      	bne.n	80074bc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80074bc:	2200      	movs	r2, #0
 80074be:	2100      	movs	r1, #0
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fb15 	bl	8007af0 <USBH_CtlReq>
 80074c6:	4603      	mov	r3, r0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	4613      	mov	r3, r2
 80074dc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80074e4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80074f0:	2302      	movs	r3, #2
 80074f2:	e094      	b.n	800761e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	785a      	ldrb	r2, [r3, #1]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	3302      	adds	r3, #2
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	3303      	adds	r3, #3
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	b29b      	uxth	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b29a      	uxth	r2, r3
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	791a      	ldrb	r2, [r3, #4]
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	795a      	ldrb	r2, [r3, #5]
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	799a      	ldrb	r2, [r3, #6]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	79da      	ldrb	r2, [r3, #7]
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007544:	2b00      	cmp	r3, #0
 8007546:	d004      	beq.n	8007552 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800754e:	2b01      	cmp	r3, #1
 8007550:	d11b      	bne.n	800758a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	79db      	ldrb	r3, [r3, #7]
 8007556:	2b20      	cmp	r3, #32
 8007558:	dc0f      	bgt.n	800757a <USBH_ParseDevDesc+0xaa>
 800755a:	2b08      	cmp	r3, #8
 800755c:	db0f      	blt.n	800757e <USBH_ParseDevDesc+0xae>
 800755e:	3b08      	subs	r3, #8
 8007560:	4a32      	ldr	r2, [pc, #200]	@ (800762c <USBH_ParseDevDesc+0x15c>)
 8007562:	fa22 f303 	lsr.w	r3, r2, r3
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	bf14      	ite	ne
 800756e:	2301      	movne	r3, #1
 8007570:	2300      	moveq	r3, #0
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d106      	bne.n	8007586 <USBH_ParseDevDesc+0xb6>
 8007578:	e001      	b.n	800757e <USBH_ParseDevDesc+0xae>
 800757a:	2b40      	cmp	r3, #64	@ 0x40
 800757c:	d003      	beq.n	8007586 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2208      	movs	r2, #8
 8007582:	71da      	strb	r2, [r3, #7]
        break;
 8007584:	e000      	b.n	8007588 <USBH_ParseDevDesc+0xb8>
        break;
 8007586:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007588:	e00e      	b.n	80075a8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007590:	2b02      	cmp	r3, #2
 8007592:	d107      	bne.n	80075a4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	79db      	ldrb	r3, [r3, #7]
 8007598:	2b08      	cmp	r3, #8
 800759a:	d005      	beq.n	80075a8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	2208      	movs	r2, #8
 80075a0:	71da      	strb	r2, [r3, #7]
 80075a2:	e001      	b.n	80075a8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80075a4:	2303      	movs	r3, #3
 80075a6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80075a8:	88fb      	ldrh	r3, [r7, #6]
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d936      	bls.n	800761c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	3308      	adds	r3, #8
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	461a      	mov	r2, r3
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	3309      	adds	r3, #9
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	b29b      	uxth	r3, r3
 80075c0:	4313      	orrs	r3, r2
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	330a      	adds	r3, #10
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	330b      	adds	r3, #11
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	b29b      	uxth	r3, r3
 80075da:	4313      	orrs	r3, r2
 80075dc:	b29a      	uxth	r2, r3
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	330c      	adds	r3, #12
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	330d      	adds	r3, #13
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	021b      	lsls	r3, r3, #8
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	4313      	orrs	r3, r2
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	7b9a      	ldrb	r2, [r3, #14]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	7bda      	ldrb	r2, [r3, #15]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	7c1a      	ldrb	r2, [r3, #16]
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	7c5a      	ldrb	r2, [r3, #17]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
}
 800761e:	4618      	mov	r0, r3
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	01000101 	.word	0x01000101

08007630 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08c      	sub	sp, #48	@ 0x30
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007644:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800765e:	2302      	movs	r3, #2
 8007660:	e0de      	b.n	8007820 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b09      	cmp	r3, #9
 800766c:	d002      	beq.n	8007674 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800766e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007670:	2209      	movs	r2, #9
 8007672:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	781a      	ldrb	r2, [r3, #0]
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	785a      	ldrb	r2, [r3, #1]
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	3302      	adds	r3, #2
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	3303      	adds	r3, #3
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	b29b      	uxth	r3, r3
 8007696:	4313      	orrs	r3, r2
 8007698:	b29b      	uxth	r3, r3
 800769a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800769e:	bf28      	it	cs
 80076a0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	791a      	ldrb	r2, [r3, #4]
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	795a      	ldrb	r2, [r3, #5]
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	799a      	ldrb	r2, [r3, #6]
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	79da      	ldrb	r2, [r3, #7]
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	7a1a      	ldrb	r2, [r3, #8]
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	2b09      	cmp	r3, #9
 80076d6:	f240 80a1 	bls.w	800781c <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 80076da:	2309      	movs	r3, #9
 80076dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076e2:	e085      	b.n	80077f0 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80076e4:	f107 0316 	add.w	r3, r7, #22
 80076e8:	4619      	mov	r1, r3
 80076ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076ec:	f000 f9e6 	bl	8007abc <USBH_GetNextDesc>
 80076f0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80076f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f4:	785b      	ldrb	r3, [r3, #1]
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d17a      	bne.n	80077f0 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80076fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d002      	beq.n	8007708 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007704:	2209      	movs	r2, #9
 8007706:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800770c:	221a      	movs	r2, #26
 800770e:	fb02 f303 	mul.w	r3, r2, r3
 8007712:	3308      	adds	r3, #8
 8007714:	6a3a      	ldr	r2, [r7, #32]
 8007716:	4413      	add	r3, r2
 8007718:	3302      	adds	r3, #2
 800771a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800771c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800771e:	69f8      	ldr	r0, [r7, #28]
 8007720:	f000 f882 	bl	8007828 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800772e:	e043      	b.n	80077b8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007730:	f107 0316 	add.w	r3, r7, #22
 8007734:	4619      	mov	r1, r3
 8007736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007738:	f000 f9c0 	bl	8007abc <USBH_GetNextDesc>
 800773c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007740:	785b      	ldrb	r3, [r3, #1]
 8007742:	2b05      	cmp	r3, #5
 8007744:	d138      	bne.n	80077b8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	795b      	ldrb	r3, [r3, #5]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d113      	bne.n	8007776 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007752:	2b02      	cmp	r3, #2
 8007754:	d003      	beq.n	800775e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	799b      	ldrb	r3, [r3, #6]
 800775a:	2b03      	cmp	r3, #3
 800775c:	d10b      	bne.n	8007776 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	79db      	ldrb	r3, [r3, #7]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10b      	bne.n	800777e <USBH_ParseCfgDesc+0x14e>
 8007766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b09      	cmp	r3, #9
 800776c:	d007      	beq.n	800777e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800776e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007770:	2209      	movs	r2, #9
 8007772:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007774:	e003      	b.n	800777e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007778:	2207      	movs	r2, #7
 800777a:	701a      	strb	r2, [r3, #0]
 800777c:	e000      	b.n	8007780 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800777e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007784:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007788:	3201      	adds	r2, #1
 800778a:	00d2      	lsls	r2, r2, #3
 800778c:	211a      	movs	r1, #26
 800778e:	fb01 f303 	mul.w	r3, r1, r3
 8007792:	4413      	add	r3, r2
 8007794:	3308      	adds	r3, #8
 8007796:	6a3a      	ldr	r2, [r7, #32]
 8007798:	4413      	add	r3, r2
 800779a:	3304      	adds	r3, #4
 800779c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800779e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077a0:	69b9      	ldr	r1, [r7, #24]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 f86f 	bl	8007886 <USBH_ParseEPDesc>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80077ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077b2:	3301      	adds	r3, #1
 80077b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d80a      	bhi.n	80077d6 <USBH_ParseCfgDesc+0x1a6>
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	791b      	ldrb	r3, [r3, #4]
 80077c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d204      	bcs.n	80077d6 <USBH_ParseCfgDesc+0x1a6>
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	885a      	ldrh	r2, [r3, #2]
 80077d0:	8afb      	ldrh	r3, [r7, #22]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d8ac      	bhi.n	8007730 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	791b      	ldrb	r3, [r3, #4]
 80077da:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80077de:	429a      	cmp	r2, r3
 80077e0:	d201      	bcs.n	80077e6 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e01c      	b.n	8007820 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 80077e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077ea:	3301      	adds	r3, #1
 80077ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d805      	bhi.n	8007804 <USBH_ParseCfgDesc+0x1d4>
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	885a      	ldrh	r2, [r3, #2]
 80077fc:	8afb      	ldrh	r3, [r7, #22]
 80077fe:	429a      	cmp	r2, r3
 8007800:	f63f af70 	bhi.w	80076e4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	791b      	ldrb	r3, [r3, #4]
 8007808:	2b02      	cmp	r3, #2
 800780a:	bf28      	it	cs
 800780c:	2302      	movcs	r3, #2
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007814:	429a      	cmp	r2, r3
 8007816:	d201      	bcs.n	800781c <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8007818:	2303      	movs	r3, #3
 800781a:	e001      	b.n	8007820 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800781c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007820:	4618      	mov	r0, r3
 8007822:	3730      	adds	r7, #48	@ 0x30
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	785a      	ldrb	r2, [r3, #1]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	789a      	ldrb	r2, [r3, #2]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	78da      	ldrb	r2, [r3, #3]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	791a      	ldrb	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	795a      	ldrb	r2, [r3, #5]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	799a      	ldrb	r2, [r3, #6]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	79da      	ldrb	r2, [r3, #7]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	7a1a      	ldrb	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	721a      	strb	r2, [r3, #8]
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007886:	b480      	push	{r7}
 8007888:	b087      	sub	sp, #28
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	781a      	ldrb	r2, [r3, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	785a      	ldrb	r2, [r3, #1]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	789a      	ldrb	r2, [r3, #2]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	78da      	ldrb	r2, [r3, #3]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3304      	adds	r3, #4
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3305      	adds	r3, #5
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	4313      	orrs	r3, r2
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	799a      	ldrb	r2, [r3, #6]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	889b      	ldrh	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d009      	beq.n	80078f4 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80078e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078e8:	d804      	bhi.n	80078f4 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80078ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078f2:	d901      	bls.n	80078f8 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80078f4:	2303      	movs	r3, #3
 80078f6:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d136      	bne.n	8007970 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	78db      	ldrb	r3, [r3, #3]
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d108      	bne.n	8007920 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	889b      	ldrh	r3, [r3, #4]
 8007912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007916:	f240 8097 	bls.w	8007a48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800791a:	2303      	movs	r3, #3
 800791c:	75fb      	strb	r3, [r7, #23]
 800791e:	e093      	b.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	78db      	ldrb	r3, [r3, #3]
 8007924:	f003 0303 	and.w	r3, r3, #3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d107      	bne.n	800793c <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	889b      	ldrh	r3, [r3, #4]
 8007930:	2b40      	cmp	r3, #64	@ 0x40
 8007932:	f240 8089 	bls.w	8007a48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007936:	2303      	movs	r3, #3
 8007938:	75fb      	strb	r3, [r7, #23]
 800793a:	e085      	b.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	78db      	ldrb	r3, [r3, #3]
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	2b01      	cmp	r3, #1
 8007946:	d005      	beq.n	8007954 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	78db      	ldrb	r3, [r3, #3]
 800794c:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007950:	2b03      	cmp	r3, #3
 8007952:	d10a      	bne.n	800796a <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	799b      	ldrb	r3, [r3, #6]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <USBH_ParseEPDesc+0xde>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	799b      	ldrb	r3, [r3, #6]
 8007960:	2b10      	cmp	r3, #16
 8007962:	d970      	bls.n	8007a46 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007964:	2303      	movs	r3, #3
 8007966:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007968:	e06d      	b.n	8007a46 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800796a:	2303      	movs	r3, #3
 800796c:	75fb      	strb	r3, [r7, #23]
 800796e:	e06b      	b.n	8007a48 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007976:	2b01      	cmp	r3, #1
 8007978:	d13c      	bne.n	80079f4 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	78db      	ldrb	r3, [r3, #3]
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d005      	beq.n	8007992 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	78db      	ldrb	r3, [r3, #3]
 800798a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	889b      	ldrh	r3, [r3, #4]
 8007996:	2b40      	cmp	r3, #64	@ 0x40
 8007998:	d956      	bls.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800799a:	2303      	movs	r3, #3
 800799c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800799e:	e053      	b.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	78db      	ldrb	r3, [r3, #3]
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d10e      	bne.n	80079ca <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	799b      	ldrb	r3, [r3, #6]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d007      	beq.n	80079c4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80079b8:	2b10      	cmp	r3, #16
 80079ba:	d803      	bhi.n	80079c4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80079c0:	2b40      	cmp	r3, #64	@ 0x40
 80079c2:	d941      	bls.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80079c4:	2303      	movs	r3, #3
 80079c6:	75fb      	strb	r3, [r7, #23]
 80079c8:	e03e      	b.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	78db      	ldrb	r3, [r3, #3]
 80079ce:	f003 0303 	and.w	r3, r3, #3
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d10b      	bne.n	80079ee <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	799b      	ldrb	r3, [r3, #6]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <USBH_ParseEPDesc+0x162>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	889b      	ldrh	r3, [r3, #4]
 80079e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079e6:	d32f      	bcc.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80079e8:	2303      	movs	r3, #3
 80079ea:	75fb      	strb	r3, [r7, #23]
 80079ec:	e02c      	b.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80079ee:	2303      	movs	r3, #3
 80079f0:	75fb      	strb	r3, [r7, #23]
 80079f2:	e029      	b.n	8007a48 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d120      	bne.n	8007a40 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	78db      	ldrb	r3, [r3, #3]
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	889b      	ldrh	r3, [r3, #4]
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	d01a      	beq.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007a12:	2303      	movs	r3, #3
 8007a14:	75fb      	strb	r3, [r7, #23]
 8007a16:	e017      	b.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	78db      	ldrb	r3, [r3, #3]
 8007a1c:	f003 0303 	and.w	r3, r3, #3
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d10a      	bne.n	8007a3a <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	799b      	ldrb	r3, [r3, #6]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <USBH_ParseEPDesc+0x1ae>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	889b      	ldrh	r3, [r3, #4]
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d909      	bls.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007a34:	2303      	movs	r3, #3
 8007a36:	75fb      	strb	r3, [r7, #23]
 8007a38:	e006      	b.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	75fb      	strb	r3, [r7, #23]
 8007a3e:	e003      	b.n	8007a48 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007a40:	2303      	movs	r3, #3
 8007a42:	75fb      	strb	r3, [r7, #23]
 8007a44:	e000      	b.n	8007a48 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007a46:	bf00      	nop
  }

  return status;
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b087      	sub	sp, #28
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	4613      	mov	r3, r2
 8007a62:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d120      	bne.n	8007ab0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	1e9a      	subs	r2, r3, #2
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	4293      	cmp	r3, r2
 8007a78:	bf28      	it	cs
 8007a7a:	4613      	movcs	r3, r2
 8007a7c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3302      	adds	r3, #2
 8007a82:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a84:	2300      	movs	r3, #0
 8007a86:	82fb      	strh	r3, [r7, #22]
 8007a88:	e00b      	b.n	8007aa2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a8a:	8afb      	ldrh	r3, [r7, #22]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	4413      	add	r3, r2
 8007a90:	781a      	ldrb	r2, [r3, #0]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007a9c:	8afb      	ldrh	r3, [r7, #22]
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	82fb      	strh	r3, [r7, #22]
 8007aa2:	8afa      	ldrh	r2, [r7, #22]
 8007aa4:	8abb      	ldrh	r3, [r7, #20]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d3ef      	bcc.n	8007a8a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	7812      	ldrb	r2, [r2, #0]
 8007ace:	4413      	add	r3, r2
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4413      	add	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4613      	mov	r3, r2
 8007afc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007afe:	2301      	movs	r3, #1
 8007b00:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	789b      	ldrb	r3, [r3, #2]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d002      	beq.n	8007b10 <USBH_CtlReq+0x20>
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d00f      	beq.n	8007b2e <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8007b0e:	e027      	b.n	8007b60 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	88fa      	ldrh	r2, [r7, #6]
 8007b1a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2202      	movs	r2, #2
 8007b26:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b2c:	e018      	b.n	8007b60 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 f81c 	bl	8007b6c <USBH_HandleControl>
 8007b34:	4603      	mov	r3, r0
 8007b36:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <USBH_CtlReq+0x54>
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d106      	bne.n	8007b52 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2201      	movs	r2, #1
 8007b48:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	761a      	strb	r2, [r3, #24]
      break;
 8007b50:	e005      	b.n	8007b5e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d102      	bne.n	8007b5e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	709a      	strb	r2, [r3, #2]
      break;
 8007b5e:	bf00      	nop
  }
  return status;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af02      	add	r7, sp, #8
 8007b72:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b74:	2301      	movs	r3, #1
 8007b76:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	7e1b      	ldrb	r3, [r3, #24]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	2b0a      	cmp	r3, #10
 8007b84:	f200 8157 	bhi.w	8007e36 <USBH_HandleControl+0x2ca>
 8007b88:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <USBH_HandleControl+0x24>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007bbd 	.word	0x08007bbd
 8007b94:	08007bd7 	.word	0x08007bd7
 8007b98:	08007c41 	.word	0x08007c41
 8007b9c:	08007c67 	.word	0x08007c67
 8007ba0:	08007ca1 	.word	0x08007ca1
 8007ba4:	08007ccb 	.word	0x08007ccb
 8007ba8:	08007d1d 	.word	0x08007d1d
 8007bac:	08007d3f 	.word	0x08007d3f
 8007bb0:	08007d7b 	.word	0x08007d7b
 8007bb4:	08007da1 	.word	0x08007da1
 8007bb8:	08007ddf 	.word	0x08007ddf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f103 0110 	add.w	r1, r3, #16
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	795b      	ldrb	r3, [r3, #5]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f945 	bl	8007e58 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	761a      	strb	r2, [r3, #24]
      break;
 8007bd4:	e13a      	b.n	8007e4c <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	795b      	ldrb	r3, [r3, #5]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fcb5 	bl	800854c <USBH_LL_GetURBState>
 8007be2:	4603      	mov	r3, r0
 8007be4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d11e      	bne.n	8007c2a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	7c1b      	ldrb	r3, [r3, #16]
 8007bf0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007bf4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	8adb      	ldrh	r3, [r3, #22]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007bfe:	7b7b      	ldrb	r3, [r7, #13]
 8007c00:	2b80      	cmp	r3, #128	@ 0x80
 8007c02:	d103      	bne.n	8007c0c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2203      	movs	r2, #3
 8007c08:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007c0a:	e116      	b.n	8007e3a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2205      	movs	r2, #5
 8007c10:	761a      	strb	r2, [r3, #24]
      break;
 8007c12:	e112      	b.n	8007e3a <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8007c14:	7b7b      	ldrb	r3, [r7, #13]
 8007c16:	2b80      	cmp	r3, #128	@ 0x80
 8007c18:	d103      	bne.n	8007c22 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2209      	movs	r2, #9
 8007c1e:	761a      	strb	r2, [r3, #24]
      break;
 8007c20:	e10b      	b.n	8007e3a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2207      	movs	r2, #7
 8007c26:	761a      	strb	r2, [r3, #24]
      break;
 8007c28:	e107      	b.n	8007e3a <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d003      	beq.n	8007c38 <USBH_HandleControl+0xcc>
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	f040 8101 	bne.w	8007e3a <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	220b      	movs	r2, #11
 8007c3c:	761a      	strb	r2, [r3, #24]
      break;
 8007c3e:	e0fc      	b.n	8007e3a <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6899      	ldr	r1, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	899a      	ldrh	r2, [r3, #12]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	791b      	ldrb	r3, [r3, #4]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f93c 	bl	8007ed6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2204      	movs	r2, #4
 8007c62:	761a      	strb	r2, [r3, #24]
      break;
 8007c64:	e0f2      	b.n	8007e4c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	791b      	ldrb	r3, [r3, #4]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fc6d 	bl	800854c <USBH_LL_GetURBState>
 8007c72:	4603      	mov	r3, r0
 8007c74:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d103      	bne.n	8007c84 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2209      	movs	r2, #9
 8007c80:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007c82:	e0dc      	b.n	8007e3e <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	d102      	bne.n	8007c90 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c8e:	e0d6      	b.n	8007e3e <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	f040 80d3 	bne.w	8007e3e <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	220b      	movs	r2, #11
 8007c9c:	761a      	strb	r2, [r3, #24]
      break;
 8007c9e:	e0ce      	b.n	8007e3e <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6899      	ldr	r1, [r3, #8]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	899a      	ldrh	r2, [r3, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	795b      	ldrb	r3, [r3, #5]
 8007cac:	2001      	movs	r0, #1
 8007cae:	9000      	str	r0, [sp, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f8eb 	bl	8007e8c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2206      	movs	r2, #6
 8007cc6:	761a      	strb	r2, [r3, #24]
      break;
 8007cc8:	e0c0      	b.n	8007e4c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	795b      	ldrb	r3, [r3, #5]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fc3b 	bl	800854c <USBH_LL_GetURBState>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d103      	bne.n	8007ce8 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2207      	movs	r2, #7
 8007ce4:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007ce6:	e0ac      	b.n	8007e42 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	2b05      	cmp	r3, #5
 8007cec:	d105      	bne.n	8007cfa <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	220c      	movs	r2, #12
 8007cf2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf8:	e0a3      	b.n	8007e42 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d103      	bne.n	8007d08 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2205      	movs	r2, #5
 8007d04:	761a      	strb	r2, [r3, #24]
      break;
 8007d06:	e09c      	b.n	8007e42 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	f040 8099 	bne.w	8007e42 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	220b      	movs	r2, #11
 8007d14:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007d16:	2302      	movs	r3, #2
 8007d18:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1a:	e092      	b.n	8007e42 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	791b      	ldrb	r3, [r3, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	2100      	movs	r1, #0
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f8d6 	bl	8007ed6 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	761a      	strb	r2, [r3, #24]

      break;
 8007d3c:	e086      	b.n	8007e4c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	791b      	ldrb	r3, [r3, #4]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fc01 	bl	800854c <USBH_LL_GetURBState>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d105      	bne.n	8007d60 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	220d      	movs	r2, #13
 8007d58:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007d5e:	e072      	b.n	8007e46 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d103      	bne.n	8007d6e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	220b      	movs	r2, #11
 8007d6a:	761a      	strb	r2, [r3, #24]
      break;
 8007d6c:	e06b      	b.n	8007e46 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	2b05      	cmp	r3, #5
 8007d72:	d168      	bne.n	8007e46 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8007d74:	2303      	movs	r3, #3
 8007d76:	73fb      	strb	r3, [r7, #15]
      break;
 8007d78:	e065      	b.n	8007e46 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	795b      	ldrb	r3, [r3, #5]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	9200      	str	r2, [sp, #0]
 8007d82:	2200      	movs	r2, #0
 8007d84:	2100      	movs	r1, #0
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f880 	bl	8007e8c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	220a      	movs	r2, #10
 8007d9c:	761a      	strb	r2, [r3, #24]
      break;
 8007d9e:	e055      	b.n	8007e4c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	795b      	ldrb	r3, [r3, #5]
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fbd0 	bl	800854c <USBH_LL_GetURBState>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d105      	bne.n	8007dc2 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	220d      	movs	r2, #13
 8007dbe:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007dc0:	e043      	b.n	8007e4a <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d103      	bne.n	8007dd0 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2209      	movs	r2, #9
 8007dcc:	761a      	strb	r2, [r3, #24]
      break;
 8007dce:	e03c      	b.n	8007e4a <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d139      	bne.n	8007e4a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	220b      	movs	r2, #11
 8007dda:	761a      	strb	r2, [r3, #24]
      break;
 8007ddc:	e035      	b.n	8007e4a <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	7e5b      	ldrb	r3, [r3, #25]
 8007de2:	3301      	adds	r3, #1
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	765a      	strb	r2, [r3, #25]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7e5b      	ldrb	r3, [r3, #25]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d806      	bhi.n	8007e00 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007dfe:	e025      	b.n	8007e4c <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e06:	2106      	movs	r1, #6
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	795b      	ldrb	r3, [r3, #5]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f90d 	bl	8008038 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	791b      	ldrb	r3, [r3, #4]
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f907 	bl	8008038 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e30:	2302      	movs	r3, #2
 8007e32:	73fb      	strb	r3, [r7, #15]
      break;
 8007e34:	e00a      	b.n	8007e4c <USBH_HandleControl+0x2e0>

    default:
      break;
 8007e36:	bf00      	nop
 8007e38:	e008      	b.n	8007e4c <USBH_HandleControl+0x2e0>
      break;
 8007e3a:	bf00      	nop
 8007e3c:	e006      	b.n	8007e4c <USBH_HandleControl+0x2e0>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e004      	b.n	8007e4c <USBH_HandleControl+0x2e0>
      break;
 8007e42:	bf00      	nop
 8007e44:	e002      	b.n	8007e4c <USBH_HandleControl+0x2e0>
      break;
 8007e46:	bf00      	nop
 8007e48:	e000      	b.n	8007e4c <USBH_HandleControl+0x2e0>
      break;
 8007e4a:	bf00      	nop
  }

  return status;
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop

08007e58 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af04      	add	r7, sp, #16
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e66:	79f9      	ldrb	r1, [r7, #7]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	9303      	str	r3, [sp, #12]
 8007e6c:	2308      	movs	r3, #8
 8007e6e:	9302      	str	r3, [sp, #8]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	2300      	movs	r3, #0
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 fb34 	bl	80084ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af04      	add	r7, sp, #16
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	4611      	mov	r1, r2
 8007e98:	461a      	mov	r2, r3
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	80fb      	strh	r3, [r7, #6]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007eb0:	7979      	ldrb	r1, [r7, #5]
 8007eb2:	7e3b      	ldrb	r3, [r7, #24]
 8007eb4:	9303      	str	r3, [sp, #12]
 8007eb6:	88fb      	ldrh	r3, [r7, #6]
 8007eb8:	9302      	str	r3, [sp, #8]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f000 fb0f 	bl	80084ea <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b088      	sub	sp, #32
 8007eda:	af04      	add	r7, sp, #16
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	80fb      	strh	r3, [r7, #6]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007eec:	7979      	ldrb	r1, [r7, #5]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	9303      	str	r3, [sp, #12]
 8007ef2:	88fb      	ldrh	r3, [r7, #6]
 8007ef4:	9302      	str	r3, [sp, #8]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	2301      	movs	r3, #1
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	2300      	movs	r3, #0
 8007f00:	2201      	movs	r2, #1
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 faf1 	bl	80084ea <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f08:	2300      	movs	r3, #0

}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b088      	sub	sp, #32
 8007f16:	af04      	add	r7, sp, #16
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	461a      	mov	r2, r3
 8007f20:	460b      	mov	r3, r1
 8007f22:	80fb      	strh	r3, [r7, #6]
 8007f24:	4613      	mov	r3, r2
 8007f26:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f36:	7979      	ldrb	r1, [r7, #5]
 8007f38:	7e3b      	ldrb	r3, [r7, #24]
 8007f3a:	9303      	str	r3, [sp, #12]
 8007f3c:	88fb      	ldrh	r3, [r7, #6]
 8007f3e:	9302      	str	r3, [sp, #8]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	2301      	movs	r3, #1
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	2302      	movs	r3, #2
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 facc 	bl	80084ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af04      	add	r7, sp, #16
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	4611      	mov	r1, r2
 8007f68:	461a      	mov	r2, r3
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	80fb      	strh	r3, [r7, #6]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f72:	7979      	ldrb	r1, [r7, #5]
 8007f74:	2300      	movs	r3, #0
 8007f76:	9303      	str	r3, [sp, #12]
 8007f78:	88fb      	ldrh	r3, [r7, #6]
 8007f7a:	9302      	str	r3, [sp, #8]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	2301      	movs	r3, #1
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	2302      	movs	r3, #2
 8007f86:	2201      	movs	r2, #1
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 faae 	bl	80084ea <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af04      	add	r7, sp, #16
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	70fb      	strb	r3, [r7, #3]
 8007faa:	460b      	mov	r3, r1
 8007fac:	70bb      	strb	r3, [r7, #2]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007fb2:	7878      	ldrb	r0, [r7, #1]
 8007fb4:	78ba      	ldrb	r2, [r7, #2]
 8007fb6:	78f9      	ldrb	r1, [r7, #3]
 8007fb8:	8b3b      	ldrh	r3, [r7, #24]
 8007fba:	9302      	str	r3, [sp, #8]
 8007fbc:	7d3b      	ldrb	r3, [r7, #20]
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	7c3b      	ldrb	r3, [r7, #16]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fa53 	bl	8008472 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007fe2:	78fb      	ldrb	r3, [r7, #3]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fa72 	bl	80084d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f836 	bl	8008074 <USBH_GetFreePipe>
 8008008:	4603      	mov	r3, r0
 800800a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800800c:	89fb      	ldrh	r3, [r7, #14]
 800800e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008012:	4293      	cmp	r3, r2
 8008014:	d00a      	beq.n	800802c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	89fb      	ldrh	r3, [r7, #14]
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	33e0      	adds	r3, #224	@ 0xe0
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	440b      	add	r3, r1
 800802a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800802c:	89fb      	ldrh	r3, [r7, #14]
 800802e:	b2db      	uxtb	r3, r3
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	2b0f      	cmp	r3, #15
 8008048:	d80d      	bhi.n	8008066 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	33e0      	adds	r3, #224	@ 0xe0
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	33e0      	adds	r3, #224	@ 0xe0
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]
 8008084:	e00f      	b.n	80080a6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	33e0      	adds	r3, #224	@ 0xe0
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	b29b      	uxth	r3, r3
 800809e:	e007      	b.n	80080b0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	3301      	adds	r3, #1
 80080a4:	73fb      	strb	r3, [r7, #15]
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	2b0f      	cmp	r3, #15
 80080aa:	d9ec      	bls.n	8008086 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80080ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80080c0:	2201      	movs	r2, #1
 80080c2:	490e      	ldr	r1, [pc, #56]	@ (80080fc <MX_USB_HOST_Init+0x40>)
 80080c4:	480e      	ldr	r0, [pc, #56]	@ (8008100 <MX_USB_HOST_Init+0x44>)
 80080c6:	f7fe fb0f 	bl	80066e8 <USBH_Init>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80080d0:	f7f8 fca4 	bl	8000a1c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80080d4:	490b      	ldr	r1, [pc, #44]	@ (8008104 <MX_USB_HOST_Init+0x48>)
 80080d6:	480a      	ldr	r0, [pc, #40]	@ (8008100 <MX_USB_HOST_Init+0x44>)
 80080d8:	f7fe fbb1 	bl	800683e <USBH_RegisterClass>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80080e2:	f7f8 fc9b 	bl	8000a1c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80080e6:	4806      	ldr	r0, [pc, #24]	@ (8008100 <MX_USB_HOST_Init+0x44>)
 80080e8:	f7fe fc35 	bl	8006956 <USBH_Start>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80080f2:	f7f8 fc93 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80080f6:	bf00      	nop
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	0800811d 	.word	0x0800811d
 8008100:	20000194 	.word	0x20000194
 8008104:	2000000c 	.word	0x2000000c

08008108 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800810c:	4802      	ldr	r0, [pc, #8]	@ (8008118 <MX_USB_HOST_Process+0x10>)
 800810e:	f7fe fc33 	bl	8006978 <USBH_Process>
}
 8008112:	bf00      	nop
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20000194 	.word	0x20000194

0800811c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	3b01      	subs	r3, #1
 800812c:	2b04      	cmp	r3, #4
 800812e:	d819      	bhi.n	8008164 <USBH_UserProcess+0x48>
 8008130:	a201      	add	r2, pc, #4	@ (adr r2, 8008138 <USBH_UserProcess+0x1c>)
 8008132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008136:	bf00      	nop
 8008138:	08008165 	.word	0x08008165
 800813c:	08008155 	.word	0x08008155
 8008140:	08008165 	.word	0x08008165
 8008144:	0800815d 	.word	0x0800815d
 8008148:	0800814d 	.word	0x0800814d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800814c:	4b09      	ldr	r3, [pc, #36]	@ (8008174 <USBH_UserProcess+0x58>)
 800814e:	2203      	movs	r2, #3
 8008150:	701a      	strb	r2, [r3, #0]
  break;
 8008152:	e008      	b.n	8008166 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008154:	4b07      	ldr	r3, [pc, #28]	@ (8008174 <USBH_UserProcess+0x58>)
 8008156:	2202      	movs	r2, #2
 8008158:	701a      	strb	r2, [r3, #0]
  break;
 800815a:	e004      	b.n	8008166 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800815c:	4b05      	ldr	r3, [pc, #20]	@ (8008174 <USBH_UserProcess+0x58>)
 800815e:	2201      	movs	r2, #1
 8008160:	701a      	strb	r2, [r3, #0]
  break;
 8008162:	e000      	b.n	8008166 <USBH_UserProcess+0x4a>

  default:
  break;
 8008164:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	2000056c 	.word	0x2000056c

08008178 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08a      	sub	sp, #40	@ 0x28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008180:	f107 0314 	add.w	r3, r7, #20
 8008184:	2200      	movs	r2, #0
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	605a      	str	r2, [r3, #4]
 800818a:	609a      	str	r2, [r3, #8]
 800818c:	60da      	str	r2, [r3, #12]
 800818e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008198:	d147      	bne.n	800822a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800819a:	2300      	movs	r3, #0
 800819c:	613b      	str	r3, [r7, #16]
 800819e:	4b25      	ldr	r3, [pc, #148]	@ (8008234 <HAL_HCD_MspInit+0xbc>)
 80081a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a2:	4a24      	ldr	r2, [pc, #144]	@ (8008234 <HAL_HCD_MspInit+0xbc>)
 80081a4:	f043 0301 	orr.w	r3, r3, #1
 80081a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80081aa:	4b22      	ldr	r3, [pc, #136]	@ (8008234 <HAL_HCD_MspInit+0xbc>)
 80081ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80081b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081bc:	2300      	movs	r3, #0
 80081be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80081c4:	f107 0314 	add.w	r3, r7, #20
 80081c8:	4619      	mov	r1, r3
 80081ca:	481b      	ldr	r0, [pc, #108]	@ (8008238 <HAL_HCD_MspInit+0xc0>)
 80081cc:	f7f8 ff94 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80081d0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80081d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081d6:	2302      	movs	r3, #2
 80081d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081da:	2300      	movs	r3, #0
 80081dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081de:	2300      	movs	r3, #0
 80081e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081e2:	230a      	movs	r3, #10
 80081e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081e6:	f107 0314 	add.w	r3, r7, #20
 80081ea:	4619      	mov	r1, r3
 80081ec:	4812      	ldr	r0, [pc, #72]	@ (8008238 <HAL_HCD_MspInit+0xc0>)
 80081ee:	f7f8 ff83 	bl	80010f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081f2:	4b10      	ldr	r3, [pc, #64]	@ (8008234 <HAL_HCD_MspInit+0xbc>)
 80081f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008234 <HAL_HCD_MspInit+0xbc>)
 80081f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081fc:	6353      	str	r3, [r2, #52]	@ 0x34
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
 8008202:	4b0c      	ldr	r3, [pc, #48]	@ (8008234 <HAL_HCD_MspInit+0xbc>)
 8008204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008206:	4a0b      	ldr	r2, [pc, #44]	@ (8008234 <HAL_HCD_MspInit+0xbc>)
 8008208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800820c:	6453      	str	r3, [r2, #68]	@ 0x44
 800820e:	4b09      	ldr	r3, [pc, #36]	@ (8008234 <HAL_HCD_MspInit+0xbc>)
 8008210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800821a:	2200      	movs	r2, #0
 800821c:	2100      	movs	r1, #0
 800821e:	2043      	movs	r0, #67	@ 0x43
 8008220:	f7f8 ff33 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008224:	2043      	movs	r0, #67	@ 0x43
 8008226:	f7f8 ff4c 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800822a:	bf00      	nop
 800822c:	3728      	adds	r7, #40	@ 0x28
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	40023800 	.word	0x40023800
 8008238:	40020000 	.word	0x40020000

0800823c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe ff6d 	bl	800712a <USBH_LL_IncTimer>
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008266:	4618      	mov	r0, r3
 8008268:	f7fe ffa9 	bl	80071be <USBH_LL_Connect>
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008282:	4618      	mov	r0, r3
 8008284:	f7fe ffb2 	bl	80071ec <USBH_LL_Disconnect>
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
 800829c:	4613      	mov	r3, r2
 800829e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe ff5f 	bl	800717e <USBH_LL_PortEnabled>
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fe ff5f 	bl	800719a <USBH_LL_PortDisabled>
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d12a      	bne.n	800834c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80082f6:	4a18      	ldr	r2, [pc, #96]	@ (8008358 <USBH_LL_Init+0x74>)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a15      	ldr	r2, [pc, #84]	@ (8008358 <USBH_LL_Init+0x74>)
 8008302:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008306:	4b14      	ldr	r3, [pc, #80]	@ (8008358 <USBH_LL_Init+0x74>)
 8008308:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800830c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800830e:	4b12      	ldr	r3, [pc, #72]	@ (8008358 <USBH_LL_Init+0x74>)
 8008310:	2208      	movs	r2, #8
 8008312:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008314:	4b10      	ldr	r3, [pc, #64]	@ (8008358 <USBH_LL_Init+0x74>)
 8008316:	2201      	movs	r2, #1
 8008318:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800831a:	4b0f      	ldr	r3, [pc, #60]	@ (8008358 <USBH_LL_Init+0x74>)
 800831c:	2200      	movs	r2, #0
 800831e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008320:	4b0d      	ldr	r3, [pc, #52]	@ (8008358 <USBH_LL_Init+0x74>)
 8008322:	2202      	movs	r2, #2
 8008324:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008326:	4b0c      	ldr	r3, [pc, #48]	@ (8008358 <USBH_LL_Init+0x74>)
 8008328:	2200      	movs	r2, #0
 800832a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800832c:	480a      	ldr	r0, [pc, #40]	@ (8008358 <USBH_LL_Init+0x74>)
 800832e:	f7f9 f898 	bl	8001462 <HAL_HCD_Init>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d001      	beq.n	800833c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008338:	f7f8 fb70 	bl	8000a1c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800833c:	4806      	ldr	r0, [pc, #24]	@ (8008358 <USBH_LL_Init+0x74>)
 800833e:	f7f9 fcd5 	bl	8001cec <HAL_HCD_GetCurrentFrame>
 8008342:	4603      	mov	r3, r0
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7fe fee0 	bl	800710c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20000570 	.word	0x20000570

0800835c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008372:	4618      	mov	r0, r3
 8008374:	f7f9 fc42 	bl	8001bfc <HAL_HCD_Start>
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	4618      	mov	r0, r3
 8008380:	f000 f94c 	bl	800861c <USBH_Get_USB_Status>
 8008384:	4603      	mov	r3, r0
 8008386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008388:	7bbb      	ldrb	r3, [r7, #14]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7f9 fc4a 	bl	8001c42 <HAL_HCD_Stop>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 f931 	bl	800861c <USBH_Get_USB_Status>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083be:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80083da:	4618      	mov	r0, r3
 80083dc:	f7f9 fc94 	bl	8001d08 <HAL_HCD_GetCurrentSpeed>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d00c      	beq.n	8008400 <USBH_LL_GetSpeed+0x38>
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d80d      	bhi.n	8008406 <USBH_LL_GetSpeed+0x3e>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <USBH_LL_GetSpeed+0x2c>
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d003      	beq.n	80083fa <USBH_LL_GetSpeed+0x32>
 80083f2:	e008      	b.n	8008406 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
    break;
 80083f8:	e008      	b.n	800840c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80083fa:	2301      	movs	r3, #1
 80083fc:	73fb      	strb	r3, [r7, #15]
    break;
 80083fe:	e005      	b.n	800840c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008400:	2302      	movs	r3, #2
 8008402:	73fb      	strb	r3, [r7, #15]
    break;
 8008404:	e002      	b.n	800840c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008406:	2301      	movs	r3, #1
 8008408:	73fb      	strb	r3, [r7, #15]
    break;
 800840a:	bf00      	nop
  }
  return  speed;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800842c:	4618      	mov	r0, r3
 800842e:	f7f9 fc25 	bl	8001c7c <HAL_HCD_ResetPort>
 8008432:	4603      	mov	r3, r0
 8008434:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	4618      	mov	r0, r3
 800843a:	f000 f8ef 	bl	800861c <USBH_Get_USB_Status>
 800843e:	4603      	mov	r3, r0
 8008440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008442:	7bbb      	ldrb	r3, [r7, #14]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	4611      	mov	r1, r2
 8008462:	4618      	mov	r0, r3
 8008464:	f7f9 fc2d 	bl	8001cc2 <HAL_HCD_HC_GetXferCount>
 8008468:	4603      	mov	r3, r0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 8008472:	b590      	push	{r4, r7, lr}
 8008474:	b089      	sub	sp, #36	@ 0x24
 8008476:	af04      	add	r7, sp, #16
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	4608      	mov	r0, r1
 800847c:	4611      	mov	r1, r2
 800847e:	461a      	mov	r2, r3
 8008480:	4603      	mov	r3, r0
 8008482:	70fb      	strb	r3, [r7, #3]
 8008484:	460b      	mov	r3, r1
 8008486:	70bb      	strb	r3, [r7, #2]
 8008488:	4613      	mov	r3, r2
 800848a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800849a:	787c      	ldrb	r4, [r7, #1]
 800849c:	78ba      	ldrb	r2, [r7, #2]
 800849e:	78f9      	ldrb	r1, [r7, #3]
 80084a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80084a2:	9302      	str	r3, [sp, #8]
 80084a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	4623      	mov	r3, r4
 80084b2:	f7f9 f83d 	bl	8001530 <HAL_HCD_HC_Init>
 80084b6:	4603      	mov	r3, r0
 80084b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 f8ad 	bl	800861c <USBH_Get_USB_Status>
 80084c2:	4603      	mov	r3, r0
 80084c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd90      	pop	{r4, r7, pc}

080084d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80084ea:	b590      	push	{r4, r7, lr}
 80084ec:	b089      	sub	sp, #36	@ 0x24
 80084ee:	af04      	add	r7, sp, #16
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	4608      	mov	r0, r1
 80084f4:	4611      	mov	r1, r2
 80084f6:	461a      	mov	r2, r3
 80084f8:	4603      	mov	r3, r0
 80084fa:	70fb      	strb	r3, [r7, #3]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70bb      	strb	r3, [r7, #2]
 8008500:	4613      	mov	r3, r2
 8008502:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008512:	787c      	ldrb	r4, [r7, #1]
 8008514:	78ba      	ldrb	r2, [r7, #2]
 8008516:	78f9      	ldrb	r1, [r7, #3]
 8008518:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800851c:	9303      	str	r3, [sp, #12]
 800851e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008520:	9302      	str	r3, [sp, #8]
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	f897 3020 	ldrb.w	r3, [r7, #32]
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	4623      	mov	r3, r4
 800852e:	f7f9 f8b7 	bl	80016a0 <HAL_HCD_HC_SubmitRequest>
 8008532:	4603      	mov	r3, r0
 8008534:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f86f 	bl	800861c <USBH_Get_USB_Status>
 800853e:	4603      	mov	r3, r0
 8008540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008542:	7bbb      	ldrb	r3, [r7, #14]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	bd90      	pop	{r4, r7, pc}

0800854c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f7f9 fb98 	bl	8001c98 <HAL_HCD_HC_GetURBState>
 8008568:	4603      	mov	r3, r0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008584:	2b01      	cmp	r3, #1
 8008586:	d103      	bne.n	8008590 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f872 	bl	8008674 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008590:	20c8      	movs	r0, #200	@ 0xc8
 8008592:	f7f8 fc7b 	bl	8000e8c <HAL_Delay>
  return USBH_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
 80085ac:	4613      	mov	r3, r2
 80085ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80085b8:	78fa      	ldrb	r2, [r7, #3]
 80085ba:	68f9      	ldr	r1, [r7, #12]
 80085bc:	4613      	mov	r3, r2
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	1a9b      	subs	r3, r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	3317      	adds	r3, #23
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80085ce:	78fa      	ldrb	r2, [r7, #3]
 80085d0:	68f9      	ldr	r1, [r7, #12]
 80085d2:	4613      	mov	r3, r2
 80085d4:	011b      	lsls	r3, r3, #4
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	333c      	adds	r3, #60	@ 0x3c
 80085de:	78ba      	ldrb	r2, [r7, #2]
 80085e0:	701a      	strb	r2, [r3, #0]
 80085e2:	e009      	b.n	80085f8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	68f9      	ldr	r1, [r7, #12]
 80085e8:	4613      	mov	r3, r2
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	1a9b      	subs	r3, r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	440b      	add	r3, r1
 80085f2:	333d      	adds	r3, #61	@ 0x3d
 80085f4:	78ba      	ldrb	r2, [r7, #2]
 80085f6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7f8 fc3c 	bl	8000e8c <HAL_Delay>
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	2b03      	cmp	r3, #3
 800862e:	d817      	bhi.n	8008660 <USBH_Get_USB_Status+0x44>
 8008630:	a201      	add	r2, pc, #4	@ (adr r2, 8008638 <USBH_Get_USB_Status+0x1c>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	08008649 	.word	0x08008649
 800863c:	0800864f 	.word	0x0800864f
 8008640:	08008655 	.word	0x08008655
 8008644:	0800865b 	.word	0x0800865b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]
    break;
 800864c:	e00b      	b.n	8008666 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800864e:	2302      	movs	r3, #2
 8008650:	73fb      	strb	r3, [r7, #15]
    break;
 8008652:	e008      	b.n	8008666 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008654:	2301      	movs	r3, #1
 8008656:	73fb      	strb	r3, [r7, #15]
    break;
 8008658:	e005      	b.n	8008666 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800865a:	2302      	movs	r3, #2
 800865c:	73fb      	strb	r3, [r7, #15]
    break;
 800865e:	e002      	b.n	8008666 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008660:	2302      	movs	r3, #2
 8008662:	73fb      	strb	r3, [r7, #15]
    break;
 8008664:	bf00      	nop
  }
  return usb_status;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
 800868c:	e001      	b.n	8008692 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800868e:	2301      	movs	r3, #1
 8008690:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	461a      	mov	r2, r3
 8008696:	2101      	movs	r1, #1
 8008698:	4803      	ldr	r0, [pc, #12]	@ (80086a8 <MX_DriverVbusFS+0x34>)
 800869a:	f7f8 fec9 	bl	8001430 <HAL_GPIO_WritePin>
}
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	40020800 	.word	0x40020800

080086ac <malloc>:
 80086ac:	4b02      	ldr	r3, [pc, #8]	@ (80086b8 <malloc+0xc>)
 80086ae:	4601      	mov	r1, r0
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	f000 b82d 	b.w	8008710 <_malloc_r>
 80086b6:	bf00      	nop
 80086b8:	2000002c 	.word	0x2000002c

080086bc <free>:
 80086bc:	4b02      	ldr	r3, [pc, #8]	@ (80086c8 <free+0xc>)
 80086be:	4601      	mov	r1, r0
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	f000 b8f5 	b.w	80088b0 <_free_r>
 80086c6:	bf00      	nop
 80086c8:	2000002c 	.word	0x2000002c

080086cc <sbrk_aligned>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	4e0f      	ldr	r6, [pc, #60]	@ (800870c <sbrk_aligned+0x40>)
 80086d0:	460c      	mov	r4, r1
 80086d2:	6831      	ldr	r1, [r6, #0]
 80086d4:	4605      	mov	r5, r0
 80086d6:	b911      	cbnz	r1, 80086de <sbrk_aligned+0x12>
 80086d8:	f000 f8ae 	bl	8008838 <_sbrk_r>
 80086dc:	6030      	str	r0, [r6, #0]
 80086de:	4621      	mov	r1, r4
 80086e0:	4628      	mov	r0, r5
 80086e2:	f000 f8a9 	bl	8008838 <_sbrk_r>
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	d103      	bne.n	80086f2 <sbrk_aligned+0x26>
 80086ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80086ee:	4620      	mov	r0, r4
 80086f0:	bd70      	pop	{r4, r5, r6, pc}
 80086f2:	1cc4      	adds	r4, r0, #3
 80086f4:	f024 0403 	bic.w	r4, r4, #3
 80086f8:	42a0      	cmp	r0, r4
 80086fa:	d0f8      	beq.n	80086ee <sbrk_aligned+0x22>
 80086fc:	1a21      	subs	r1, r4, r0
 80086fe:	4628      	mov	r0, r5
 8008700:	f000 f89a 	bl	8008838 <_sbrk_r>
 8008704:	3001      	adds	r0, #1
 8008706:	d1f2      	bne.n	80086ee <sbrk_aligned+0x22>
 8008708:	e7ef      	b.n	80086ea <sbrk_aligned+0x1e>
 800870a:	bf00      	nop
 800870c:	20000950 	.word	0x20000950

08008710 <_malloc_r>:
 8008710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008714:	1ccd      	adds	r5, r1, #3
 8008716:	f025 0503 	bic.w	r5, r5, #3
 800871a:	3508      	adds	r5, #8
 800871c:	2d0c      	cmp	r5, #12
 800871e:	bf38      	it	cc
 8008720:	250c      	movcc	r5, #12
 8008722:	2d00      	cmp	r5, #0
 8008724:	4606      	mov	r6, r0
 8008726:	db01      	blt.n	800872c <_malloc_r+0x1c>
 8008728:	42a9      	cmp	r1, r5
 800872a:	d904      	bls.n	8008736 <_malloc_r+0x26>
 800872c:	230c      	movs	r3, #12
 800872e:	6033      	str	r3, [r6, #0]
 8008730:	2000      	movs	r0, #0
 8008732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008736:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800880c <_malloc_r+0xfc>
 800873a:	f000 f869 	bl	8008810 <__malloc_lock>
 800873e:	f8d8 3000 	ldr.w	r3, [r8]
 8008742:	461c      	mov	r4, r3
 8008744:	bb44      	cbnz	r4, 8008798 <_malloc_r+0x88>
 8008746:	4629      	mov	r1, r5
 8008748:	4630      	mov	r0, r6
 800874a:	f7ff ffbf 	bl	80086cc <sbrk_aligned>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	4604      	mov	r4, r0
 8008752:	d158      	bne.n	8008806 <_malloc_r+0xf6>
 8008754:	f8d8 4000 	ldr.w	r4, [r8]
 8008758:	4627      	mov	r7, r4
 800875a:	2f00      	cmp	r7, #0
 800875c:	d143      	bne.n	80087e6 <_malloc_r+0xd6>
 800875e:	2c00      	cmp	r4, #0
 8008760:	d04b      	beq.n	80087fa <_malloc_r+0xea>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	4639      	mov	r1, r7
 8008766:	4630      	mov	r0, r6
 8008768:	eb04 0903 	add.w	r9, r4, r3
 800876c:	f000 f864 	bl	8008838 <_sbrk_r>
 8008770:	4581      	cmp	r9, r0
 8008772:	d142      	bne.n	80087fa <_malloc_r+0xea>
 8008774:	6821      	ldr	r1, [r4, #0]
 8008776:	1a6d      	subs	r5, r5, r1
 8008778:	4629      	mov	r1, r5
 800877a:	4630      	mov	r0, r6
 800877c:	f7ff ffa6 	bl	80086cc <sbrk_aligned>
 8008780:	3001      	adds	r0, #1
 8008782:	d03a      	beq.n	80087fa <_malloc_r+0xea>
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	442b      	add	r3, r5
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	f8d8 3000 	ldr.w	r3, [r8]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	bb62      	cbnz	r2, 80087ec <_malloc_r+0xdc>
 8008792:	f8c8 7000 	str.w	r7, [r8]
 8008796:	e00f      	b.n	80087b8 <_malloc_r+0xa8>
 8008798:	6822      	ldr	r2, [r4, #0]
 800879a:	1b52      	subs	r2, r2, r5
 800879c:	d420      	bmi.n	80087e0 <_malloc_r+0xd0>
 800879e:	2a0b      	cmp	r2, #11
 80087a0:	d917      	bls.n	80087d2 <_malloc_r+0xc2>
 80087a2:	1961      	adds	r1, r4, r5
 80087a4:	42a3      	cmp	r3, r4
 80087a6:	6025      	str	r5, [r4, #0]
 80087a8:	bf18      	it	ne
 80087aa:	6059      	strne	r1, [r3, #4]
 80087ac:	6863      	ldr	r3, [r4, #4]
 80087ae:	bf08      	it	eq
 80087b0:	f8c8 1000 	streq.w	r1, [r8]
 80087b4:	5162      	str	r2, [r4, r5]
 80087b6:	604b      	str	r3, [r1, #4]
 80087b8:	4630      	mov	r0, r6
 80087ba:	f000 f82f 	bl	800881c <__malloc_unlock>
 80087be:	f104 000b 	add.w	r0, r4, #11
 80087c2:	1d23      	adds	r3, r4, #4
 80087c4:	f020 0007 	bic.w	r0, r0, #7
 80087c8:	1ac2      	subs	r2, r0, r3
 80087ca:	bf1c      	itt	ne
 80087cc:	1a1b      	subne	r3, r3, r0
 80087ce:	50a3      	strne	r3, [r4, r2]
 80087d0:	e7af      	b.n	8008732 <_malloc_r+0x22>
 80087d2:	6862      	ldr	r2, [r4, #4]
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	bf0c      	ite	eq
 80087d8:	f8c8 2000 	streq.w	r2, [r8]
 80087dc:	605a      	strne	r2, [r3, #4]
 80087de:	e7eb      	b.n	80087b8 <_malloc_r+0xa8>
 80087e0:	4623      	mov	r3, r4
 80087e2:	6864      	ldr	r4, [r4, #4]
 80087e4:	e7ae      	b.n	8008744 <_malloc_r+0x34>
 80087e6:	463c      	mov	r4, r7
 80087e8:	687f      	ldr	r7, [r7, #4]
 80087ea:	e7b6      	b.n	800875a <_malloc_r+0x4a>
 80087ec:	461a      	mov	r2, r3
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	42a3      	cmp	r3, r4
 80087f2:	d1fb      	bne.n	80087ec <_malloc_r+0xdc>
 80087f4:	2300      	movs	r3, #0
 80087f6:	6053      	str	r3, [r2, #4]
 80087f8:	e7de      	b.n	80087b8 <_malloc_r+0xa8>
 80087fa:	230c      	movs	r3, #12
 80087fc:	6033      	str	r3, [r6, #0]
 80087fe:	4630      	mov	r0, r6
 8008800:	f000 f80c 	bl	800881c <__malloc_unlock>
 8008804:	e794      	b.n	8008730 <_malloc_r+0x20>
 8008806:	6005      	str	r5, [r0, #0]
 8008808:	e7d6      	b.n	80087b8 <_malloc_r+0xa8>
 800880a:	bf00      	nop
 800880c:	20000954 	.word	0x20000954

08008810 <__malloc_lock>:
 8008810:	4801      	ldr	r0, [pc, #4]	@ (8008818 <__malloc_lock+0x8>)
 8008812:	f000 b84b 	b.w	80088ac <__retarget_lock_acquire_recursive>
 8008816:	bf00      	nop
 8008818:	20000a94 	.word	0x20000a94

0800881c <__malloc_unlock>:
 800881c:	4801      	ldr	r0, [pc, #4]	@ (8008824 <__malloc_unlock+0x8>)
 800881e:	f000 b846 	b.w	80088ae <__retarget_lock_release_recursive>
 8008822:	bf00      	nop
 8008824:	20000a94 	.word	0x20000a94

08008828 <memset>:
 8008828:	4402      	add	r2, r0
 800882a:	4603      	mov	r3, r0
 800882c:	4293      	cmp	r3, r2
 800882e:	d100      	bne.n	8008832 <memset+0xa>
 8008830:	4770      	bx	lr
 8008832:	f803 1b01 	strb.w	r1, [r3], #1
 8008836:	e7f9      	b.n	800882c <memset+0x4>

08008838 <_sbrk_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4d06      	ldr	r5, [pc, #24]	@ (8008854 <_sbrk_r+0x1c>)
 800883c:	2300      	movs	r3, #0
 800883e:	4604      	mov	r4, r0
 8008840:	4608      	mov	r0, r1
 8008842:	602b      	str	r3, [r5, #0]
 8008844:	f7f8 fa3e 	bl	8000cc4 <_sbrk>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_sbrk_r+0x1a>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	b103      	cbz	r3, 8008852 <_sbrk_r+0x1a>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	20000a90 	.word	0x20000a90

08008858 <__errno>:
 8008858:	4b01      	ldr	r3, [pc, #4]	@ (8008860 <__errno+0x8>)
 800885a:	6818      	ldr	r0, [r3, #0]
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	2000002c 	.word	0x2000002c

08008864 <__libc_init_array>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	4d0d      	ldr	r5, [pc, #52]	@ (800889c <__libc_init_array+0x38>)
 8008868:	4c0d      	ldr	r4, [pc, #52]	@ (80088a0 <__libc_init_array+0x3c>)
 800886a:	1b64      	subs	r4, r4, r5
 800886c:	10a4      	asrs	r4, r4, #2
 800886e:	2600      	movs	r6, #0
 8008870:	42a6      	cmp	r6, r4
 8008872:	d109      	bne.n	8008888 <__libc_init_array+0x24>
 8008874:	4d0b      	ldr	r5, [pc, #44]	@ (80088a4 <__libc_init_array+0x40>)
 8008876:	4c0c      	ldr	r4, [pc, #48]	@ (80088a8 <__libc_init_array+0x44>)
 8008878:	f000 f864 	bl	8008944 <_init>
 800887c:	1b64      	subs	r4, r4, r5
 800887e:	10a4      	asrs	r4, r4, #2
 8008880:	2600      	movs	r6, #0
 8008882:	42a6      	cmp	r6, r4
 8008884:	d105      	bne.n	8008892 <__libc_init_array+0x2e>
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	f855 3b04 	ldr.w	r3, [r5], #4
 800888c:	4798      	blx	r3
 800888e:	3601      	adds	r6, #1
 8008890:	e7ee      	b.n	8008870 <__libc_init_array+0xc>
 8008892:	f855 3b04 	ldr.w	r3, [r5], #4
 8008896:	4798      	blx	r3
 8008898:	3601      	adds	r6, #1
 800889a:	e7f2      	b.n	8008882 <__libc_init_array+0x1e>
 800889c:	08008980 	.word	0x08008980
 80088a0:	08008980 	.word	0x08008980
 80088a4:	08008980 	.word	0x08008980
 80088a8:	08008984 	.word	0x08008984

080088ac <__retarget_lock_acquire_recursive>:
 80088ac:	4770      	bx	lr

080088ae <__retarget_lock_release_recursive>:
 80088ae:	4770      	bx	lr

080088b0 <_free_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4605      	mov	r5, r0
 80088b4:	2900      	cmp	r1, #0
 80088b6:	d041      	beq.n	800893c <_free_r+0x8c>
 80088b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088bc:	1f0c      	subs	r4, r1, #4
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bfb8      	it	lt
 80088c2:	18e4      	addlt	r4, r4, r3
 80088c4:	f7ff ffa4 	bl	8008810 <__malloc_lock>
 80088c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008940 <_free_r+0x90>)
 80088ca:	6813      	ldr	r3, [r2, #0]
 80088cc:	b933      	cbnz	r3, 80088dc <_free_r+0x2c>
 80088ce:	6063      	str	r3, [r4, #4]
 80088d0:	6014      	str	r4, [r2, #0]
 80088d2:	4628      	mov	r0, r5
 80088d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088d8:	f7ff bfa0 	b.w	800881c <__malloc_unlock>
 80088dc:	42a3      	cmp	r3, r4
 80088de:	d908      	bls.n	80088f2 <_free_r+0x42>
 80088e0:	6820      	ldr	r0, [r4, #0]
 80088e2:	1821      	adds	r1, r4, r0
 80088e4:	428b      	cmp	r3, r1
 80088e6:	bf01      	itttt	eq
 80088e8:	6819      	ldreq	r1, [r3, #0]
 80088ea:	685b      	ldreq	r3, [r3, #4]
 80088ec:	1809      	addeq	r1, r1, r0
 80088ee:	6021      	streq	r1, [r4, #0]
 80088f0:	e7ed      	b.n	80088ce <_free_r+0x1e>
 80088f2:	461a      	mov	r2, r3
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	b10b      	cbz	r3, 80088fc <_free_r+0x4c>
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	d9fa      	bls.n	80088f2 <_free_r+0x42>
 80088fc:	6811      	ldr	r1, [r2, #0]
 80088fe:	1850      	adds	r0, r2, r1
 8008900:	42a0      	cmp	r0, r4
 8008902:	d10b      	bne.n	800891c <_free_r+0x6c>
 8008904:	6820      	ldr	r0, [r4, #0]
 8008906:	4401      	add	r1, r0
 8008908:	1850      	adds	r0, r2, r1
 800890a:	4283      	cmp	r3, r0
 800890c:	6011      	str	r1, [r2, #0]
 800890e:	d1e0      	bne.n	80088d2 <_free_r+0x22>
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	6053      	str	r3, [r2, #4]
 8008916:	4408      	add	r0, r1
 8008918:	6010      	str	r0, [r2, #0]
 800891a:	e7da      	b.n	80088d2 <_free_r+0x22>
 800891c:	d902      	bls.n	8008924 <_free_r+0x74>
 800891e:	230c      	movs	r3, #12
 8008920:	602b      	str	r3, [r5, #0]
 8008922:	e7d6      	b.n	80088d2 <_free_r+0x22>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	1821      	adds	r1, r4, r0
 8008928:	428b      	cmp	r3, r1
 800892a:	bf04      	itt	eq
 800892c:	6819      	ldreq	r1, [r3, #0]
 800892e:	685b      	ldreq	r3, [r3, #4]
 8008930:	6063      	str	r3, [r4, #4]
 8008932:	bf04      	itt	eq
 8008934:	1809      	addeq	r1, r1, r0
 8008936:	6021      	streq	r1, [r4, #0]
 8008938:	6054      	str	r4, [r2, #4]
 800893a:	e7ca      	b.n	80088d2 <_free_r+0x22>
 800893c:	bd38      	pop	{r3, r4, r5, pc}
 800893e:	bf00      	nop
 8008940:	20000954 	.word	0x20000954

08008944 <_init>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	bf00      	nop
 8008948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894a:	bc08      	pop	{r3}
 800894c:	469e      	mov	lr, r3
 800894e:	4770      	bx	lr

08008950 <_fini>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	bf00      	nop
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr
